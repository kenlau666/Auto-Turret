
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e0  080052e0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  080052e0  080052e0  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e0  080052e0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000010c  080053f4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080053f4  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dede  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002234  00000000  00000000  0002e013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2f5  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001127d  00000000  00000000  0004d1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d50c  00000000  00000000  0005e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  000fb9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004c0c 	.word	0x08004c0c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	08004c0c 	.word	0x08004c0c

08000224 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 800022e:	2300      	movs	r3, #0
 8000230:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	2012      	movs	r0, #18
 8000236:	f000 fa0b 	bl	8000650 <SCCB_WriteByte>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d101      	bne.n	8000244 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000240:	2301      	movs	r3, #1
 8000242:	e030      	b.n	80002a6 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000244:	1d7b      	adds	r3, r7, #5
 8000246:	220b      	movs	r2, #11
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa2f 	bl	80006ae <SCCB_ReadByte>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d101      	bne.n	800025a <Ov7725_Init+0x36>
	{
		return ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e025      	b.n	80002a6 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 800025a:	797b      	ldrb	r3, [r7, #5]
 800025c:	2b21      	cmp	r3, #33	; 0x21
 800025e:	d11f      	bne.n	80002a0 <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000260:	2300      	movs	r3, #0
 8000262:	80fb      	strh	r3, [r7, #6]
 8000264:	e015      	b.n	8000292 <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <Ov7725_Init+0x8c>)
 800026a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800026e:	b29a      	uxth	r2, r3
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <Ov7725_Init+0x8c>)
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	440b      	add	r3, r1
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	4619      	mov	r1, r3
 800027c:	4610      	mov	r0, r2
 800027e:	f000 f9e7 	bl	8000650 <SCCB_WriteByte>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d101      	bne.n	800028c <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	e00c      	b.n	80002a6 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	3301      	adds	r3, #1
 8000290:	80fb      	strh	r3, [r7, #6]
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <Ov7725_Init+0x90>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b29b      	uxth	r3, r3
 8000298:	88fa      	ldrh	r2, [r7, #6]
 800029a:	429a      	cmp	r2, r3
 800029c:	d3e3      	bcc.n	8000266 <Ov7725_Init+0x42>
 800029e:	e001      	b.n	80002a4 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 80002a0:	2301      	movs	r3, #1
 80002a2:	e000      	b.n	80002a6 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000
 80002b4:	2000009a 	.word	0x2000009a

080002b8 <ImagDisp>:

void ImagDisp(int arr[], uint8_t capture)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	; 0x28
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
	uint16_t i, j;
	uint16_t px = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	837b      	strh	r3, [r7, #26]
	uint16_t py = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	833b      	strh	r3, [r7, #24]
	char h_xv[5];
	char h_yv[5];
	//char hc[6];
	//char testing[6];
	uint16_t Camera_Data;
	if (capture == 1)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	f000 809a 	beq.w	8000408 <ImagDisp+0x150>
			return;
	
	LCD_Cam_Gram();
 80002d4:	f000 fce3 	bl	8000c9e <LCD_Cam_Gram>
	
	for(i = 0; i < 240; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	83fb      	strh	r3, [r7, #30]
 80002dc:	e047      	b.n	800036e <ImagDisp+0xb6>
	{
		for(j = 0; j < 320; j++)
 80002de:	2300      	movs	r3, #0
 80002e0:	83bb      	strh	r3, [r7, #28]
 80002e2:	e03d      	b.n	8000360 <ImagDisp+0xa8>
		{
			READ_FIFO_PIXEL(Camera_Data);
 80002e4:	2300      	movs	r3, #0
 80002e6:	82fb      	strh	r3, [r7, #22]
 80002e8:	4b49      	ldr	r3, [pc, #292]	; (8000410 <ImagDisp+0x158>)
 80002ea:	2220      	movs	r2, #32
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	4b49      	ldr	r3, [pc, #292]	; (8000414 <ImagDisp+0x15c>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002f8:	82fb      	strh	r3, [r7, #22]
 80002fa:	4b45      	ldr	r3, [pc, #276]	; (8000410 <ImagDisp+0x158>)
 80002fc:	2220      	movs	r2, #32
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	4b43      	ldr	r3, [pc, #268]	; (8000410 <ImagDisp+0x158>)
 8000302:	2220      	movs	r2, #32
 8000304:	615a      	str	r2, [r3, #20]
 8000306:	4b43      	ldr	r3, [pc, #268]	; (8000414 <ImagDisp+0x15c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	0a1b      	lsrs	r3, r3, #8
 800030c:	b2db      	uxtb	r3, r3
 800030e:	b29a      	uxth	r2, r3
 8000310:	8afb      	ldrh	r3, [r7, #22]
 8000312:	4313      	orrs	r3, r2
 8000314:	82fb      	strh	r3, [r7, #22]
 8000316:	4b3e      	ldr	r3, [pc, #248]	; (8000410 <ImagDisp+0x158>)
 8000318:	2220      	movs	r2, #32
 800031a:	611a      	str	r2, [r3, #16]
//			if (Camera_Data >= 0xF7CE)
			if (((Camera_Data & 0xF800) >= 0xC000) && ((Camera_Data & 0x07E0) <= 0x0400) && ((Camera_Data & 0x001F) <= 0x0018))
 800031c:	8afb      	ldrh	r3, [r7, #22]
 800031e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8000322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000326:	db14      	blt.n	8000352 <ImagDisp+0x9a>
 8000328:	8afb      	ldrh	r3, [r7, #22]
 800032a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800032e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000332:	dc0e      	bgt.n	8000352 <ImagDisp+0x9a>
 8000334:	8afb      	ldrh	r3, [r7, #22]
 8000336:	f003 031f 	and.w	r3, r3, #31
 800033a:	2b18      	cmp	r3, #24
 800033c:	dc09      	bgt.n	8000352 <ImagDisp+0x9a>
			{
				if (px == 0)
 800033e:	8b7b      	ldrh	r3, [r7, #26]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <ImagDisp+0x90>
					px = i;
 8000344:	8bfb      	ldrh	r3, [r7, #30]
 8000346:	837b      	strh	r3, [r7, #26]
				if (py == 0)
 8000348:	8b3b      	ldrh	r3, [r7, #24]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d101      	bne.n	8000352 <ImagDisp+0x9a>
					py = j;
 800034e:	8bbb      	ldrh	r3, [r7, #28]
 8000350:	833b      	strh	r3, [r7, #24]
			}
			LCD_Write_Data(Camera_Data);
 8000352:	8afb      	ldrh	r3, [r7, #22]
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fa69 	bl	800082c <LCD_Write_Data>
		for(j = 0; j < 320; j++)
 800035a:	8bbb      	ldrh	r3, [r7, #28]
 800035c:	3301      	adds	r3, #1
 800035e:	83bb      	strh	r3, [r7, #28]
 8000360:	8bbb      	ldrh	r3, [r7, #28]
 8000362:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000366:	d3bd      	bcc.n	80002e4 <ImagDisp+0x2c>
	for(i = 0; i < 240; i++)
 8000368:	8bfb      	ldrh	r3, [r7, #30]
 800036a:	3301      	adds	r3, #1
 800036c:	83fb      	strh	r3, [r7, #30]
 800036e:	8bfb      	ldrh	r3, [r7, #30]
 8000370:	2bef      	cmp	r3, #239	; 0xef
 8000372:	d9b4      	bls.n	80002de <ImagDisp+0x26>
		}
	}

	HAL_Delay(100);
 8000374:	2064      	movs	r0, #100	; 0x64
 8000376:	f001 fc4b 	bl	8001c10 <HAL_Delay>
	//LCD_DrawChar(160,120,'X');
	//LCD_DrawString(0,100,"Color : ");
	//sprintf(testing,"%X",test);
	//LCD_DrawString(80,100,testing);
	//HAL_Delay(2000);
	if (px && py)
 800037a:	8b7b      	ldrh	r3, [r7, #26]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d03b      	beq.n	80003f8 <ImagDisp+0x140>
 8000380:	8b3b      	ldrh	r3, [r7, #24]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d038      	beq.n	80003f8 <ImagDisp+0x140>
	{
		LCD_Clear(0,0,320,240,0xFFFF);
 8000386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	23f0      	movs	r3, #240	; 0xf0
 800038e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000392:	2100      	movs	r1, #0
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fbea 	bl	8000b6e <LCD_Clear>
		LCD_DrawString(0,40,"x_value : ");
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <ImagDisp+0x160>)
 800039c:	2128      	movs	r1, #40	; 0x28
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fc4e 	bl	8000c40 <LCD_DrawString>
		LCD_DrawString(0,70,"y_value : ");
 80003a4:	4a1d      	ldr	r2, [pc, #116]	; (800041c <ImagDisp+0x164>)
 80003a6:	2146      	movs	r1, #70	; 0x46
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fc49 	bl	8000c40 <LCD_DrawString>
		//LCD_DrawString(0,100,"Color : ");
		sprintf(h_xv,"%d",py);
 80003ae:	8b3a      	ldrh	r2, [r7, #24]
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	491a      	ldr	r1, [pc, #104]	; (8000420 <ImagDisp+0x168>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 ffae 	bl	8004318 <siprintf>
		LCD_DrawString(80,40,h_xv);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	461a      	mov	r2, r3
 80003c2:	2128      	movs	r1, #40	; 0x28
 80003c4:	2050      	movs	r0, #80	; 0x50
 80003c6:	f000 fc3b 	bl	8000c40 <LCD_DrawString>
		sprintf(h_yv,"%d",px);
 80003ca:	8b7a      	ldrh	r2, [r7, #26]
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4913      	ldr	r1, [pc, #76]	; (8000420 <ImagDisp+0x168>)
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 ffa0 	bl	8004318 <siprintf>
		LCD_DrawString(80,70,h_yv);
 80003d8:	f107 0308 	add.w	r3, r7, #8
 80003dc:	461a      	mov	r2, r3
 80003de:	2146      	movs	r1, #70	; 0x46
 80003e0:	2050      	movs	r0, #80	; 0x50
 80003e2:	f000 fc2d 	bl	8000c40 <LCD_DrawString>
		//sprintf(hc,"%X",color);
		//LCD_DrawString(80,100,hc);
		LCD_DrawChar(py,px,'D');
 80003e6:	8b79      	ldrh	r1, [r7, #26]
 80003e8:	8b3b      	ldrh	r3, [r7, #24]
 80003ea:	2244      	movs	r2, #68	; 0x44
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fbe1 	bl	8000bb4 <LCD_DrawChar>
		HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f001 fc0c 	bl	8001c10 <HAL_Delay>
	}
	arr[0] = px;
 80003f8:	8b7a      	ldrh	r2, [r7, #26]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
	arr[1] = py;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3304      	adds	r3, #4
 8000402:	8b3a      	ldrh	r2, [r7, #24]
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	e000      	b.n	800040a <ImagDisp+0x152>
			return;
 8000408:	bf00      	nop
}
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40011000 	.word	0x40011000
 8000414:	40010c00 	.word	0x40010c00
 8000418:	08004c24 	.word	0x08004c24
 800041c:	08004c30 	.word	0x08004c30
 8000420:	08004c3c 	.word	0x08004c3c

08000424 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 800042a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800042e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000430:	e002      	b.n	8000438 <SCCB_delay+0x14>
   { 
     i--; 
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	3b01      	subs	r3, #1
 8000436:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f9      	bne.n	8000432 <SCCB_delay+0xe>
   } 
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
	...

0800044c <SCCB_Start>:


static int SCCB_Start(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	SDA_H;
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <SCCB_Start+0x54>)
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <SCCB_Start+0x54>)
 8000458:	2240      	movs	r2, #64	; 0x40
 800045a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800045c:	f7ff ffe2 	bl	8000424 <SCCB_delay>
	if(!SDA_read)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	480f      	ldr	r0, [pc, #60]	; (80004a0 <SCCB_Start+0x54>)
 8000464:	f001 fe9a 	bl	800219c <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d101      	bne.n	8000472 <SCCB_Start+0x26>
	return DISABLE;	
 800046e:	2300      	movs	r3, #0
 8000470:	e013      	b.n	800049a <SCCB_Start+0x4e>
	SDA_L;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <SCCB_Start+0x54>)
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000478:	f7ff ffd4 	bl	8000424 <SCCB_delay>
	if(SDA_read) 
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	4808      	ldr	r0, [pc, #32]	; (80004a0 <SCCB_Start+0x54>)
 8000480:	f001 fe8c 	bl	800219c <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SCCB_Start+0x42>
	return DISABLE;	
 800048a:	2300      	movs	r3, #0
 800048c:	e005      	b.n	800049a <SCCB_Start+0x4e>
	SDA_L;
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <SCCB_Start+0x54>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000494:	f7ff ffc6 	bl	8000424 <SCCB_delay>
	return ENABLE;
 8000498:	2301      	movs	r3, #1
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40011000 	.word	0x40011000

080004a4 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	SCL_L;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <SCCB_Stop+0x30>)
 80004aa:	2240      	movs	r2, #64	; 0x40
 80004ac:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80004ae:	f7ff ffb9 	bl	8000424 <SCCB_delay>
	SDA_L;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <SCCB_Stop+0x30>)
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80004b8:	f7ff ffb4 	bl	8000424 <SCCB_delay>
	SCL_H;
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <SCCB_Stop+0x30>)
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80004c2:	f7ff ffaf 	bl	8000424 <SCCB_delay>
	SDA_H;
 80004c6:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <SCCB_Stop+0x30>)
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80004cc:	f7ff ffaa 	bl	8000424 <SCCB_delay>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40011000 	.word	0x40011000

080004d8 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	SCL_L;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <SCCB_Ack+0x30>)
 80004de:	2240      	movs	r2, #64	; 0x40
 80004e0:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80004e2:	f7ff ff9f 	bl	8000424 <SCCB_delay>
	SDA_L;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <SCCB_Ack+0x30>)
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80004ec:	f7ff ff9a 	bl	8000424 <SCCB_delay>
	SCL_H;
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <SCCB_Ack+0x30>)
 80004f2:	2240      	movs	r2, #64	; 0x40
 80004f4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80004f6:	f7ff ff95 	bl	8000424 <SCCB_delay>
	SCL_L;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <SCCB_Ack+0x30>)
 80004fc:	2240      	movs	r2, #64	; 0x40
 80004fe:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000500:	f7ff ff90 	bl	8000424 <SCCB_delay>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40011000 	.word	0x40011000

0800050c <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	SCL_L;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <SCCB_NoAck+0x30>)
 8000512:	2240      	movs	r2, #64	; 0x40
 8000514:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000516:	f7ff ff85 	bl	8000424 <SCCB_delay>
	SDA_H;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <SCCB_NoAck+0x30>)
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000520:	f7ff ff80 	bl	8000424 <SCCB_delay>
	SCL_H;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <SCCB_NoAck+0x30>)
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800052a:	f7ff ff7b 	bl	8000424 <SCCB_delay>
	SCL_L;
 800052e:	4b03      	ldr	r3, [pc, #12]	; (800053c <SCCB_NoAck+0x30>)
 8000530:	2240      	movs	r2, #64	; 0x40
 8000532:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000534:	f7ff ff76 	bl	8000424 <SCCB_delay>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40011000 	.word	0x40011000

08000540 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	SCL_L;
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <SCCB_WaitAck+0x48>)
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800054a:	f7ff ff6b 	bl	8000424 <SCCB_delay>
	SDA_H;			
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <SCCB_WaitAck+0x48>)
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000554:	f7ff ff66 	bl	8000424 <SCCB_delay>
	SCL_H;
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <SCCB_WaitAck+0x48>)
 800055a:	2240      	movs	r2, #64	; 0x40
 800055c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800055e:	f7ff ff61 	bl	8000424 <SCCB_delay>
	if(SDA_read)
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <SCCB_WaitAck+0x48>)
 8000566:	f001 fe19 	bl	800219c <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d004      	beq.n	800057a <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SCCB_WaitAck+0x48>)
 8000572:	2240      	movs	r2, #64	; 0x40
 8000574:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	e003      	b.n	8000582 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 800057a:	4b03      	ldr	r3, [pc, #12]	; (8000588 <SCCB_WaitAck+0x48>)
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40011000 	.word	0x40011000

0800058c <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000596:	2308      	movs	r3, #8
 8000598:	73fb      	strb	r3, [r7, #15]
    while(i--)
 800059a:	e019      	b.n	80005d0 <SCCB_SendByte+0x44>
    {
        SCL_L;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <SCCB_SendByte+0x5c>)
 800059e:	2240      	movs	r2, #64	; 0x40
 80005a0:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80005a2:	f7ff ff3f 	bl	8000424 <SCCB_delay>
      if(SendByte&0x80)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da03      	bge.n	80005b6 <SCCB_SendByte+0x2a>
        SDA_H;  
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <SCCB_SendByte+0x5c>)
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	e002      	b.n	80005bc <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <SCCB_SendByte+0x5c>)
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80005c2:	f7ff ff2f 	bl	8000424 <SCCB_delay>
		SCL_H;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SCCB_SendByte+0x5c>)
 80005c8:	2240      	movs	r2, #64	; 0x40
 80005ca:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 80005cc:	f7ff ff2a 	bl	8000424 <SCCB_delay>
    while(i--)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	1e5a      	subs	r2, r3, #1
 80005d4:	73fa      	strb	r2, [r7, #15]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1e0      	bne.n	800059c <SCCB_SendByte+0x10>
    }
    SCL_L;
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <SCCB_SendByte+0x5c>)
 80005dc:	2240      	movs	r2, #64	; 0x40
 80005de:	615a      	str	r2, [r3, #20]
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40011000 	.word	0x40011000

080005ec <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
    uint8_t i=8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <SCCB_ReceiveByte+0x60>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	611a      	str	r2, [r3, #16]
    while(i--)
 8000600:	e017      	b.n	8000632 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <SCCB_ReceiveByte+0x60>)
 800060a:	2240      	movs	r2, #64	; 0x40
 800060c:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 800060e:	f7ff ff09 	bl	8000424 <SCCB_delay>
	  SCL_H;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <SCCB_ReceiveByte+0x60>)
 8000614:	2240      	movs	r2, #64	; 0x40
 8000616:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000618:	f7ff ff04 	bl	8000424 <SCCB_delay>
      if(SDA_read)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <SCCB_ReceiveByte+0x60>)
 8000620:	f001 fdbc 	bl	800219c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d003      	beq.n	8000632 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	1e5a      	subs	r2, r3, #1
 8000636:	71fa      	strb	r2, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1e2      	bne.n	8000602 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <SCCB_ReceiveByte+0x60>)
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40011000 	.word	0x40011000

08000650 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000660:	f7ff fef4 	bl	800044c <SCCB_Start>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	e01b      	b.n	80006a6 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 800066e:	2042      	movs	r0, #66	; 0x42
 8000670:	f7ff ff8c 	bl	800058c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000674:	f7ff ff64 	bl	8000540 <SCCB_WaitAck>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 800067e:	f7ff ff11 	bl	80004a4 <SCCB_Stop>
		return DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	e00f      	b.n	80006a6 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff7e 	bl	800058c <SCCB_SendByte>
    SCCB_WaitAck();	
 8000690:	f7ff ff56 	bl	8000540 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff78 	bl	800058c <SCCB_SendByte>
    SCCB_WaitAck();   
 800069c:	f7ff ff50 	bl	8000540 <SCCB_WaitAck>
    SCCB_Stop(); 
 80006a0:	f7ff ff00 	bl	80004a4 <SCCB_Stop>
    return ENABLE;
 80006a4:	2301      	movs	r3, #1
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	807b      	strh	r3, [r7, #2]
 80006ba:	4613      	mov	r3, r2
 80006bc:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80006be:	f7ff fec5 	bl	800044c <SCCB_Start>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e040      	b.n	800074e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 80006cc:	2042      	movs	r0, #66	; 0x42
 80006ce:	f7ff ff5d 	bl	800058c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80006d2:	f7ff ff35 	bl	8000540 <SCCB_WaitAck>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 80006dc:	f7ff fee2 	bl	80004a4 <SCCB_Stop>
		return DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e034      	b.n	800074e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 80006e4:	787b      	ldrb	r3, [r7, #1]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff50 	bl	800058c <SCCB_SendByte>
    SCCB_WaitAck();	
 80006ec:	f7ff ff28 	bl	8000540 <SCCB_WaitAck>
    SCCB_Stop(); 
 80006f0:	f7ff fed8 	bl	80004a4 <SCCB_Stop>
	
    if(!SCCB_Start())
 80006f4:	f7ff feaa 	bl	800044c <SCCB_Start>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	e025      	b.n	800074e <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000702:	2043      	movs	r0, #67	; 0x43
 8000704:	f7ff ff42 	bl	800058c <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000708:	f7ff ff1a 	bl	8000540 <SCCB_WaitAck>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d117      	bne.n	8000742 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000712:	f7ff fec7 	bl	80004a4 <SCCB_Stop>
		return DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	e019      	b.n	800074e <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 800071a:	f7ff ff67 	bl	80005ec <SCCB_ReceiveByte>
 800071e:	4603      	mov	r3, r0
 8000720:	b2da      	uxtb	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d102      	bne.n	8000732 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 800072c:	f7ff feee 	bl	800050c <SCCB_NoAck>
 8000730:	e001      	b.n	8000736 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000732:	f7ff fed1 	bl	80004d8 <SCCB_Ack>
	  }
      pBuffer++;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3301      	adds	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
      length--;
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	3b01      	subs	r3, #1
 8000740:	807b      	strh	r3, [r7, #2]
    while(length)
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1e8      	bne.n	800071a <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000748:	f7ff feac 	bl	80004a4 <SCCB_Stop>
    return ENABLE;
 800074c:	2301      	movs	r3, #1
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	e002      	b.n	8000766 <Delay+0x10>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f9      	bne.n	8000760 <Delay+0xa>
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f82a 	bl	80007d8 <LCD_BackLed_Control>
	LCD_Rst();
 8000784:	f000 f810 	bl	80007a8 <LCD_Rst>
	LCD_REG_Config();
 8000788:	f000 f860 	bl	800084c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800078c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000796:	22f0      	movs	r2, #240	; 0xf0
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f9e7 	bl	8000b6e <LCD_Clear>
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LCD_Rst+0x28>)
 80007b2:	f001 fd0a 	bl	80021ca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <LCD_Rst+0x2c>)
 80007b8:	f7ff ffcd 	bl	8000756 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2102      	movs	r1, #2
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <LCD_Rst+0x28>)
 80007c2:	f001 fd02 	bl	80021ca <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LCD_Rst+0x2c>)
 80007c8:	f7ff ffc5 	bl	8000756 <Delay>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40011800 	.word	0x40011800
 80007d4:	0002bffc 	.word	0x0002bffc

080007d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <LCD_BackLed_Control+0x34>)
 80007f0:	f001 fceb 	bl	80021ca <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80007f4:	e005      	b.n	8000802 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <LCD_BackLed_Control+0x34>)
 80007fe:	f001 fce4 	bl	80021ca <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40011400 	.word	0x40011400

08000810 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800081a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	8013      	strh	r3, [r2, #0]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <LCD_Write_Data+0x1c>)
 8000838:	88fb      	ldrh	r3, [r7, #6]
 800083a:	8013      	strh	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	60020000 	.word	0x60020000

0800084c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000850:	20cf      	movs	r0, #207	; 0xcf
 8000852:	f7ff ffdd 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffe8 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800085c:	2081      	movs	r0, #129	; 0x81
 800085e:	f7ff ffe5 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000862:	2030      	movs	r0, #48	; 0x30
 8000864:	f7ff ffe2 	bl	800082c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000868:	20ed      	movs	r0, #237	; 0xed
 800086a:	f7ff ffd1 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f7ff ffdc 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000874:	2003      	movs	r0, #3
 8000876:	f7ff ffd9 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800087a:	2012      	movs	r0, #18
 800087c:	f7ff ffd6 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000880:	2081      	movs	r0, #129	; 0x81
 8000882:	f7ff ffd3 	bl	800082c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000886:	20e8      	movs	r0, #232	; 0xe8
 8000888:	f7ff ffc2 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800088c:	2085      	movs	r0, #133	; 0x85
 800088e:	f7ff ffcd 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff ffca 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000898:	2078      	movs	r0, #120	; 0x78
 800089a:	f7ff ffc7 	bl	800082c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800089e:	20cb      	movs	r0, #203	; 0xcb
 80008a0:	f7ff ffb6 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80008a4:	2039      	movs	r0, #57	; 0x39
 80008a6:	f7ff ffc1 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80008aa:	202c      	movs	r0, #44	; 0x2c
 80008ac:	f7ff ffbe 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff ffbb 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80008b6:	2034      	movs	r0, #52	; 0x34
 80008b8:	f7ff ffb8 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff ffb5 	bl	800082c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80008c2:	20f7      	movs	r0, #247	; 0xf7
 80008c4:	f7ff ffa4 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80008c8:	2020      	movs	r0, #32
 80008ca:	f7ff ffaf 	bl	800082c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80008ce:	20ea      	movs	r0, #234	; 0xea
 80008d0:	f7ff ff9e 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ffa9 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ffa6 	bl	800082c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80008e0:	20b1      	movs	r0, #177	; 0xb1
 80008e2:	f7ff ff95 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ffa0 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80008ec:	201b      	movs	r0, #27
 80008ee:	f7ff ff9d 	bl	800082c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80008f2:	20b6      	movs	r0, #182	; 0xb6
 80008f4:	f7ff ff8c 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80008f8:	200a      	movs	r0, #10
 80008fa:	f7ff ff97 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80008fe:	20a2      	movs	r0, #162	; 0xa2
 8000900:	f7ff ff94 	bl	800082c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000904:	20c0      	movs	r0, #192	; 0xc0
 8000906:	f7ff ff83 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800090a:	2035      	movs	r0, #53	; 0x35
 800090c:	f7ff ff8e 	bl	800082c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000910:	20c1      	movs	r0, #193	; 0xc1
 8000912:	f7ff ff7d 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000916:	2011      	movs	r0, #17
 8000918:	f7ff ff88 	bl	800082c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800091c:	20c5      	movs	r0, #197	; 0xc5
 800091e:	f7ff ff77 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000922:	2045      	movs	r0, #69	; 0x45
 8000924:	f7ff ff82 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000928:	2045      	movs	r0, #69	; 0x45
 800092a:	f7ff ff7f 	bl	800082c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800092e:	20c7      	movs	r0, #199	; 0xc7
 8000930:	f7ff ff6e 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000934:	20a2      	movs	r0, #162	; 0xa2
 8000936:	f7ff ff79 	bl	800082c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800093a:	20f2      	movs	r0, #242	; 0xf2
 800093c:	f7ff ff68 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff ff73 	bl	800082c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000946:	2026      	movs	r0, #38	; 0x26
 8000948:	f7ff ff62 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff ff6d 	bl	800082c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000952:	20e0      	movs	r0, #224	; 0xe0
 8000954:	f7ff ff5c 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000958:	200f      	movs	r0, #15
 800095a:	f7ff ff67 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f7ff ff64 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000964:	2024      	movs	r0, #36	; 0x24
 8000966:	f7ff ff61 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800096a:	200b      	movs	r0, #11
 800096c:	f7ff ff5e 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000970:	200e      	movs	r0, #14
 8000972:	f7ff ff5b 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000976:	2009      	movs	r0, #9
 8000978:	f7ff ff58 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800097c:	2054      	movs	r0, #84	; 0x54
 800097e:	f7ff ff55 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000982:	20a8      	movs	r0, #168	; 0xa8
 8000984:	f7ff ff52 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000988:	2046      	movs	r0, #70	; 0x46
 800098a:	f7ff ff4f 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800098e:	200c      	movs	r0, #12
 8000990:	f7ff ff4c 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000994:	2017      	movs	r0, #23
 8000996:	f7ff ff49 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800099a:	2009      	movs	r0, #9
 800099c:	f7ff ff46 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80009a0:	200f      	movs	r0, #15
 80009a2:	f7ff ff43 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80009a6:	2007      	movs	r0, #7
 80009a8:	f7ff ff40 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff3d 	bl	800082c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80009b2:	20e1      	movs	r0, #225	; 0xe1
 80009b4:	f7ff ff2c 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff37 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80009be:	2019      	movs	r0, #25
 80009c0:	f7ff ff34 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80009c4:	201b      	movs	r0, #27
 80009c6:	f7ff ff31 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80009ca:	2004      	movs	r0, #4
 80009cc:	f7ff ff2e 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80009d0:	2010      	movs	r0, #16
 80009d2:	f7ff ff2b 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80009d6:	2007      	movs	r0, #7
 80009d8:	f7ff ff28 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80009dc:	202a      	movs	r0, #42	; 0x2a
 80009de:	f7ff ff25 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80009e2:	2047      	movs	r0, #71	; 0x47
 80009e4:	f7ff ff22 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80009e8:	2039      	movs	r0, #57	; 0x39
 80009ea:	f7ff ff1f 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80009ee:	2003      	movs	r0, #3
 80009f0:	f7ff ff1c 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80009f4:	2006      	movs	r0, #6
 80009f6:	f7ff ff19 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80009fa:	2006      	movs	r0, #6
 80009fc:	f7ff ff16 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000a00:	2030      	movs	r0, #48	; 0x30
 8000a02:	f7ff ff13 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000a06:	2038      	movs	r0, #56	; 0x38
 8000a08:	f7ff ff10 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000a0c:	200f      	movs	r0, #15
 8000a0e:	f7ff ff0d 	bl	800082c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000a12:	2036      	movs	r0, #54	; 0x36
 8000a14:	f7ff fefc 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f7ff ff07 	bl	800082c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000a1e:	202a      	movs	r0, #42	; 0x2a
 8000a20:	f7ff fef6 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff01 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fefe 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fefb 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000a36:	20ef      	movs	r0, #239	; 0xef
 8000a38:	f7ff fef8 	bl	800082c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000a3c:	202b      	movs	r0, #43	; 0x2b
 8000a3e:	f7ff fee7 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fef2 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff feef 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff feec 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000a54:	203f      	movs	r0, #63	; 0x3f
 8000a56:	f7ff fee9 	bl	800082c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000a5a:	203a      	movs	r0, #58	; 0x3a
 8000a5c:	f7ff fed8 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000a60:	2055      	movs	r0, #85	; 0x55
 8000a62:	f7ff fee3 	bl	800082c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000a66:	2011      	movs	r0, #17
 8000a68:	f7ff fed2 	bl	8000810 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <LCD_REG_Config+0x230>)
 8000a6e:	f7ff fe72 	bl	8000756 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000a72:	2029      	movs	r0, #41	; 0x29
 8000a74:	f7ff fecc 	bl	8000810 <LCD_Write_Cmd>
	
	
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0002bffc 	.word	0x0002bffc

08000a80 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	4603      	mov	r3, r0
 8000a94:	80bb      	strh	r3, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	807b      	strh	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000a9e:	202a      	movs	r0, #42	; 0x2a
 8000aa0:	f7ff feb6 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff febe 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff feb8 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000abc:	88fa      	ldrh	r2, [r7, #6]
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	121b      	asrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff feaf 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fea4 	bl	800082c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000ae4:	202b      	movs	r0, #43	; 0x2b
 8000ae6:	f7ff fe93 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe9b 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe95 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	121b      	asrs	r3, r3, #8
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe8c 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	883b      	ldrh	r3, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe81 	bl	800082c <LCD_Write_Data>
	
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}

08000b32 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000b42:	202c      	movs	r0, #44	; 0x2c
 8000b44:	f7ff fe64 	bl	8000810 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e006      	b.n	8000b5c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe6b 	bl	800082c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3f4      	bcc.n	8000b4e <LCD_FillColor+0x1c>
		
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000b6e:	b590      	push	{r4, r7, lr}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4604      	mov	r4, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4603      	mov	r3, r0
 8000b82:	80bb      	strh	r3, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000b8c:	883b      	ldrh	r3, [r7, #0]
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	88b9      	ldrh	r1, [r7, #4]
 8000b92:	88f8      	ldrh	r0, [r7, #6]
 8000b94:	f7ff ff74 	bl	8000a80 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	883a      	ldrh	r2, [r7, #0]
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	8b3b      	ldrh	r3, [r7, #24]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	f7ff ffc3 	bl	8000b32 <LCD_FillColor>
	
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, uint8_t cChar )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	3b20      	subs	r3, #32
 8000bca:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000bcc:	88b9      	ldrh	r1, [r7, #4]
 8000bce:	88f8      	ldrh	r0, [r7, #6]
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	f7ff ff54 	bl	8000a80 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000bd8:	202c      	movs	r0, #44	; 0x2c
 8000bda:	f7ff fe19 	bl	8000810 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]
 8000be2:	e023      	b.n	8000c2c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000be4:	7b3a      	ldrb	r2, [r7, #12]
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	4914      	ldr	r1, [pc, #80]	; (8000c3c <LCD_DrawChar+0x88>)
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	440a      	add	r2, r1
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	737b      	strb	r3, [r7, #13]
 8000bf8:	e012      	b.n	8000c20 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000c04:	201f      	movs	r0, #31
 8000c06:	f7ff fe11 	bl	800082c <LCD_Write_Data>
 8000c0a:	e003      	b.n	8000c14 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000c0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c10:	f7ff fe0c 	bl	800082c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	737b      	strb	r3, [r7, #13]
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	d9e9      	bls.n	8000bfa <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	73bb      	strb	r3, [r7, #14]
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	d9d8      	bls.n	8000be4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	08004c90 	.word	0x08004c90

08000c40 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, uint8_t * pStr )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	603a      	str	r2, [r7, #0]
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000c50:	e01c      	b.n	8000c8c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	2be8      	cmp	r3, #232	; 0xe8
 8000c56:	d904      	bls.n	8000c62 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	3310      	adds	r3, #16
 8000c60:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000c68:	d903      	bls.n	8000c72 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	88b9      	ldrh	r1, [r7, #4]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff9a 	bl	8000bb4 <LCD_DrawChar>
		
		pStr ++;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	3308      	adds	r3, #8
 8000c8a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1de      	bne.n	8000c52 <LCD_DrawString+0x12>
		
	}
	
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <LCD_Cam_Gram>:
	 */
	
}

void LCD_Cam_Gram()
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000ca2:	2036      	movs	r0, #54	; 0x36
 8000ca4:	f7ff fdb4 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );    
 8000ca8:	2068      	movs	r0, #104	; 0x68
 8000caa:	f7ff fdbf 	bl	800082c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000cae:	202a      	movs	r0, #42	; 0x2a
 8000cb0:	f7ff fdae 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fdb9 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fdb6 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fdb3 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000cc6:	203f      	movs	r0, #63	; 0x3f
 8000cc8:	f7ff fdb0 	bl	800082c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000ccc:	202b      	movs	r0, #43	; 0x2b
 8000cce:	f7ff fd9f 	bl	8000810 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fdaa 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fda7 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fda4 	bl	800082c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000ce4:	20ef      	movs	r0, #239	; 0xef
 8000ce6:	f7ff fda1 	bl	800082c <LCD_Write_Data>
	
	LCD_Write_Cmd ( 0x2C );
 8000cea:	202c      	movs	r0, #44	; 0x2c
 8000cec:	f7ff fd90 	bl	8000810 <LCD_Write_Cmd>

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 ff27 	bl	8001b4c <HAL_Init>

  /* USER CODE BEGIN Init */
	uint8_t HMC5883L_Addr = 0x1E; uint8_t CRA = 0x70; uint8_t CRB = 0xA0;
 8000cfe:	231e      	movs	r3, #30
 8000d00:	743b      	strb	r3, [r7, #16]
 8000d02:	2370      	movs	r3, #112	; 0x70
 8000d04:	727b      	strb	r3, [r7, #9]
 8000d06:	23a0      	movs	r3, #160	; 0xa0
 8000d08:	723b      	strb	r3, [r7, #8]
	  uint8_t first = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
	  uint8_t initial_sx = 120;
 8000d0e:	2378      	movs	r3, #120	; 0x78
 8000d10:	73fb      	strb	r3, [r7, #15]
	  uint8_t initial_lx = 140;
 8000d12:	238c      	movs	r3, #140	; 0x8c
 8000d14:	73bb      	strb	r3, [r7, #14]
	  uint8_t initial_sy = 120;
 8000d16:	2378      	movs	r3, #120	; 0x78
 8000d18:	737b      	strb	r3, [r7, #13]
	  uint8_t initial_ly = 140;
 8000d1a:	238c      	movs	r3, #140	; 0x8c
 8000d1c:	733b      	strb	r3, [r7, #12]
	  uint8_t offset = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72fb      	strb	r3, [r7, #11]
	  uint8_t capture = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	75bb      	strb	r3, [r7, #22]
	  int16_t x, y, angle, degree1 = 1000, degree2 = 1000;
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	82bb      	strh	r3, [r7, #20]
 8000d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d30:	827b      	strh	r3, [r7, #18]
	  uint8_t autoMode = 0, c1, c2 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	747b      	strb	r3, [r7, #17]
 8000d36:	2300      	movs	r3, #0
 8000d38:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 fa51 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 fb61 	bl	8001404 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000d42:	f000 fc7d 	bl	8001640 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000d46:	f000 fa97 	bl	8001278 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000d4a:	f000 fac3 	bl	80012d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	
	LCD_INIT();
 8000d4e:	f7ff fd13 	bl	8000778 <LCD_INIT>
	HAL_I2C_Mem_Write(&hi2c1,HMC5883L_Addr<<1,0x00,1,&CRA,1,100);
 8000d52:	7c3b      	ldrb	r3, [r7, #16]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	b299      	uxth	r1, r3
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f107 0309 	add.w	r3, r7, #9
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4899      	ldr	r0, [pc, #612]	; (8000fd4 <main+0x2e0>)
 8000d6e:	f001 fbab 	bl	80024c8 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c1,HMC5883L_Addr<<1,0x01,1,&CRB,1,100);
 8000d72:	7c3b      	ldrb	r3, [r7, #16]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4891      	ldr	r0, [pc, #580]	; (8000fd4 <main+0x2e0>)
 8000d8e:	f001 fb9b 	bl	80024c8 <HAL_I2C_Mem_Write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(Ov7725_Init() != SUCCESS);
 8000d92:	bf00      	nop
 8000d94:	f7ff fa46 	bl	8000224 <Ov7725_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1fa      	bne.n	8000d94 <main+0xa0>
	Ov7725_vsync = 0;
 8000d9e:	4b8e      	ldr	r3, [pc, #568]	; (8000fd8 <main+0x2e4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
	int a[2] = {0,0};
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dac:	2100      	movs	r1, #0
 8000dae:	488b      	ldr	r0, [pc, #556]	; (8000fdc <main+0x2e8>)
 8000db0:	f002 fc1a 	bl	80035e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000db4:	2104      	movs	r1, #4
 8000db6:	4889      	ldr	r0, [pc, #548]	; (8000fdc <main+0x2e8>)
 8000db8:	f002 fc16 	bl	80035e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4887      	ldr	r0, [pc, #540]	; (8000fdc <main+0x2e8>)
 8000dc0:	f002 fc12 	bl	80035e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	4885      	ldr	r0, [pc, #532]	; (8000fdc <main+0x2e8>)
 8000dc8:	f002 fc0e 	bl	80035e8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, degree1);
 8000dcc:	4b83      	ldr	r3, [pc, #524]	; (8000fdc <main+0x2e8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, degree2);
 8000dd6:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <main+0x2e8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 400);
 8000de0:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <main+0x2e8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 10000);
 8000dea:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <main+0x2e8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(50);
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f000 ff0b 	bl	8001c10 <HAL_Delay>
	//{
	//}

  while (1)
  {
	  	    LCD_Cam_Gram();
 8000dfa:	f7ff ff50 	bl	8000c9e <LCD_Cam_Gram>
	  	    if (first == 0)
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d119      	bne.n	8000e38 <main+0x144>
	  	    {
	  	    	LCD_Clear(0,0,200,150,0xFFFF);
 8000e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2396      	movs	r3, #150	; 0x96
 8000e0c:	22c8      	movs	r2, #200	; 0xc8
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff feac 	bl	8000b6e <LCD_Clear>
			    LCD_DrawString(0,0,"Manual Mode:");
 8000e16:	4a72      	ldr	r2, [pc, #456]	; (8000fe0 <main+0x2ec>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ff10 	bl	8000c40 <LCD_DrawString>
			    LCD_DrawString(0,30,"Press the Switches");
 8000e20:	4a70      	ldr	r2, [pc, #448]	; (8000fe4 <main+0x2f0>)
 8000e22:	211e      	movs	r1, #30
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff ff0b 	bl	8000c40 <LCD_DrawString>
			    first = first +1;
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
			    HAL_Delay(500);
 8000e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e34:	f000 feec 	bl	8001c10 <HAL_Delay>
	  	    }
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	486b      	ldr	r0, [pc, #428]	; (8000fe8 <main+0x2f4>)
 8000e3c:	f001 f9ae 	bl	800219c <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d139      	bne.n	8000eba <main+0x1c6>
			  {
				  autoMode = (autoMode+1)%2;
 8000e46:	7c7b      	ldrb	r3, [r7, #17]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	bfb8      	it	lt
 8000e52:	425b      	neglt	r3, r3
 8000e54:	747b      	strb	r3, [r7, #17]
				  if (autoMode == 0)
 8000e56:	7c7b      	ldrb	r3, [r7, #17]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d117      	bne.n	8000e8c <main+0x198>
				  {
					  LCD_Clear(0,0,200,150,0xFFFF);
 8000e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2396      	movs	r3, #150	; 0x96
 8000e64:	22c8      	movs	r2, #200	; 0xc8
 8000e66:	2100      	movs	r1, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fe80 	bl	8000b6e <LCD_Clear>
					  LCD_DrawString(0,0,"Manual Mode:");
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <main+0x2ec>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fee4 	bl	8000c40 <LCD_DrawString>
					  LCD_DrawString(0,30,"Press the Switches");
 8000e78:	4a5a      	ldr	r2, [pc, #360]	; (8000fe4 <main+0x2f0>)
 8000e7a:	211e      	movs	r1, #30
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fedf 	bl	8000c40 <LCD_DrawString>
					  HAL_Delay(500);
 8000e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e86:	f000 fec3 	bl	8001c10 <HAL_Delay>
 8000e8a:	e016      	b.n	8000eba <main+0x1c6>
				  }
				  else
				  {
					  LCD_Clear(0,0,200,150,0xFFFF);
 8000e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2396      	movs	r3, #150	; 0x96
 8000e94:	22c8      	movs	r2, #200	; 0xc8
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fe68 	bl	8000b6e <LCD_Clear>
					  LCD_DrawString(0,0,"Auto Mode:");
 8000e9e:	4a53      	ldr	r2, [pc, #332]	; (8000fec <main+0x2f8>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fecc 	bl	8000c40 <LCD_DrawString>
					  LCD_DrawString(0,30,"Use the Laser");
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <main+0x2fc>)
 8000eaa:	211e      	movs	r1, #30
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fec7 	bl	8000c40 <LCD_DrawString>
					  HAL_Delay(500);
 8000eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb6:	f000 feab 	bl	8001c10 <HAL_Delay>
				  }
			  }
			if(!autoMode)
 8000eba:	7c7b      	ldrb	r3, [r7, #17]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 809d 	bne.w	8000ffc <main+0x308>
			  {
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1){ //up
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4848      	ldr	r0, [pc, #288]	; (8000fe8 <main+0x2f4>)
 8000ec6:	f001 f969 	bl	800219c <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d107      	bne.n	8000ee0 <main+0x1ec>
					 degree1+=50;
 8000ed0:	8abb      	ldrh	r3, [r7, #20]
 8000ed2:	3332      	adds	r3, #50	; 0x32
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	82bb      	strh	r3, [r7, #20]
					HAL_Delay(150);
 8000ed8:	2096      	movs	r0, #150	; 0x96
 8000eda:	f000 fe99 	bl	8001c10 <HAL_Delay>
 8000ede:	e02d      	b.n	8000f3c <main+0x248>
				}
			    else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1){ //down
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4841      	ldr	r0, [pc, #260]	; (8000fe8 <main+0x2f4>)
 8000ee4:	f001 f95a 	bl	800219c <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d107      	bne.n	8000efe <main+0x20a>
					 degree1-=50;
 8000eee:	8abb      	ldrh	r3, [r7, #20]
 8000ef0:	3b32      	subs	r3, #50	; 0x32
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	82bb      	strh	r3, [r7, #20]
					HAL_Delay(150);
 8000ef6:	2096      	movs	r0, #150	; 0x96
 8000ef8:	f000 fe8a 	bl	8001c10 <HAL_Delay>
 8000efc:	e01e      	b.n	8000f3c <main+0x248>
				}
			    else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 1){ //left
 8000efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f02:	4839      	ldr	r0, [pc, #228]	; (8000fe8 <main+0x2f4>)
 8000f04:	f001 f94a 	bl	800219c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d107      	bne.n	8000f1e <main+0x22a>
					degree2-=50;
 8000f0e:	8a7b      	ldrh	r3, [r7, #18]
 8000f10:	3b32      	subs	r3, #50	; 0x32
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	827b      	strh	r3, [r7, #18]
					HAL_Delay(150);
 8000f16:	2096      	movs	r0, #150	; 0x96
 8000f18:	f000 fe7a 	bl	8001c10 <HAL_Delay>
 8000f1c:	e00e      	b.n	8000f3c <main+0x248>
				}
			    else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1){ //right
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4834      	ldr	r0, [pc, #208]	; (8000ff4 <main+0x300>)
 8000f24:	f001 f93a 	bl	800219c <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <main+0x248>
					degree2+=50;
 8000f2e:	8a7b      	ldrh	r3, [r7, #18]
 8000f30:	3332      	adds	r3, #50	; 0x32
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	827b      	strh	r3, [r7, #18]
					HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f000 fe6a 	bl	8001c10 <HAL_Delay>
				}

				//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
				  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0x2e8>)
 8000f40:	f002 fb52 	bl	80035e8 <HAL_TIM_PWM_Start>
				  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f44:	2104      	movs	r1, #4
 8000f46:	4825      	ldr	r0, [pc, #148]	; (8000fdc <main+0x2e8>)
 8000f48:	f002 fb4e 	bl	80035e8 <HAL_TIM_PWM_Start>
				  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, degree1);
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <main+0x2e8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, degree2);
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0x2e8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
//				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 20000);
				  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f64:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <main+0x300>)
 8000f66:	f001 f919 	bl	800219c <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	f47f af44 	bne.w	8000dfa <main+0x106>
				  {
					  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	4820      	ldr	r0, [pc, #128]	; (8000ff8 <main+0x304>)
 8000f78:	f001 f927 	bl	80021ca <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f000 fe46 	bl	8001c10 <HAL_Delay>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <main+0x2e8>)
 8000f88:	f002 fb2e 	bl	80035e8 <HAL_TIM_PWM_Start>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200);
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0x2e8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	22c8      	movs	r2, #200	; 0xc8
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fe3b 	bl	8001c10 <HAL_Delay>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <main+0x2e8>)
 8000f9e:	f002 fb23 	bl	80035e8 <HAL_TIM_PWM_Start>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 900);
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <main+0x2e8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_Delay(1000);
 8000fac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb0:	f000 fe2e 	bl	8001c10 <HAL_Delay>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <main+0x2e8>)
 8000fb8:	f002 fb16 	bl	80035e8 <HAL_TIM_PWM_Start>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 400);
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <main+0x2e8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <main+0x304>)
 8000fcc:	f001 f8fd 	bl	80021ca <HAL_GPIO_WritePin>
 8000fd0:	e713      	b.n	8000dfa <main+0x106>
 8000fd2:	bf00      	nop
 8000fd4:	20000128 	.word	0x20000128
 8000fd8:	2000020c 	.word	0x2000020c
 8000fdc:	2000017c 	.word	0x2000017c
 8000fe0:	08004c40 	.word	0x08004c40
 8000fe4:	08004c50 	.word	0x08004c50
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	08004c64 	.word	0x08004c64
 8000ff0:	08004c70 	.word	0x08004c70
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011800 	.word	0x40011800
//					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 600);
			  }
			else
			  {
				//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
				if (Ov7725_vsync == 2)
 8000ffc:	4b72      	ldr	r3, [pc, #456]	; (80011c8 <main+0x4d4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d122      	bne.n	800104c <main+0x358>
				{
				  FIFO_PREPARE;
 8001006:	4b71      	ldr	r3, [pc, #452]	; (80011cc <main+0x4d8>)
 8001008:	2204      	movs	r2, #4
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <main+0x4dc>)
 800100e:	2220      	movs	r2, #32
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <main+0x4dc>)
 8001014:	2220      	movs	r2, #32
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	4b6c      	ldr	r3, [pc, #432]	; (80011cc <main+0x4d8>)
 800101a:	2204      	movs	r2, #4
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <main+0x4dc>)
 8001020:	2220      	movs	r2, #32
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <main+0x4dc>)
 8001026:	2220      	movs	r2, #32
 8001028:	611a      	str	r2, [r3, #16]
				  ImagDisp(a,capture);
 800102a:	7dba      	ldrb	r2, [r7, #22]
 800102c:	463b      	mov	r3, r7
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f941 	bl	80002b8 <ImagDisp>
				  capture = (capture+1)%2;
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	3301      	adds	r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	75bb      	strb	r3, [r7, #22]
				  Ov7725_vsync = 0;
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <main+0x4d4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			    }
				if (capture)
 800104c:	7dbb      	ldrb	r3, [r7, #22]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f43f aed3 	beq.w	8000dfa <main+0x106>
				{
					if ((a[0] && a[1]) &&((a[0] >= initial_lx + offset) || (a[0] <= initial_sx - offset) || (a[1] >= initial_ly + offset) || (a[1] <= initial_sy - offset)))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d05c      	beq.n	8001114 <main+0x420>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d059      	beq.n	8001114 <main+0x420>
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	7bb9      	ldrb	r1, [r7, #14]
 8001064:	7afb      	ldrb	r3, [r7, #11]
 8001066:	440b      	add	r3, r1
 8001068:	429a      	cmp	r2, r3
 800106a:	da11      	bge.n	8001090 <main+0x39c>
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	7bf9      	ldrb	r1, [r7, #15]
 8001070:	7afb      	ldrb	r3, [r7, #11]
 8001072:	1acb      	subs	r3, r1, r3
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <main+0x39c>
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	7b39      	ldrb	r1, [r7, #12]
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	440b      	add	r3, r1
 8001080:	429a      	cmp	r2, r3
 8001082:	da05      	bge.n	8001090 <main+0x39c>
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7b79      	ldrb	r1, [r7, #13]
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	1acb      	subs	r3, r1, r3
 800108c:	429a      	cmp	r2, r3
 800108e:	dc41      	bgt.n	8001114 <main+0x420>
					{
						if (a[0] >= initial_lx + offset)
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	7bb9      	ldrb	r1, [r7, #14]
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	440b      	add	r3, r1
 8001098:	429a      	cmp	r2, r3
 800109a:	db04      	blt.n	80010a6 <main+0x3b2>
							degree1 -= 20;
 800109c:	8abb      	ldrh	r3, [r7, #20]
 800109e:	3b14      	subs	r3, #20
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	82bb      	strh	r3, [r7, #20]
 80010a4:	e009      	b.n	80010ba <main+0x3c6>
						else if (a[0] <= initial_sx - offset)
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	7bf9      	ldrb	r1, [r7, #15]
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	1acb      	subs	r3, r1, r3
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dc03      	bgt.n	80010ba <main+0x3c6>
							degree1 += 20;
 80010b2:	8abb      	ldrh	r3, [r7, #20]
 80010b4:	3314      	adds	r3, #20
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	82bb      	strh	r3, [r7, #20]
						if (a[1] >= initial_ly + offset)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	7b39      	ldrb	r1, [r7, #12]
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	440b      	add	r3, r1
 80010c2:	429a      	cmp	r2, r3
 80010c4:	db04      	blt.n	80010d0 <main+0x3dc>
							degree2 -= 20;
 80010c6:	8a7b      	ldrh	r3, [r7, #18]
 80010c8:	3b14      	subs	r3, #20
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	827b      	strh	r3, [r7, #18]
 80010ce:	e009      	b.n	80010e4 <main+0x3f0>
						else if (a[1] <= initial_sy - offset)
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	7b79      	ldrb	r1, [r7, #13]
 80010d4:	7afb      	ldrb	r3, [r7, #11]
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	429a      	cmp	r2, r3
 80010da:	dc03      	bgt.n	80010e4 <main+0x3f0>
							degree2 += 20;
 80010dc:	8a7b      	ldrh	r3, [r7, #18]
 80010de:	3314      	adds	r3, #20
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	827b      	strh	r3, [r7, #18]
						HAL_Delay(100);
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	f000 fd93 	bl	8001c10 <HAL_Delay>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4839      	ldr	r0, [pc, #228]	; (80011d4 <main+0x4e0>)
 80010ee:	f002 fa7b 	bl	80035e8 <HAL_TIM_PWM_Start>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010f2:	2104      	movs	r1, #4
 80010f4:	4837      	ldr	r0, [pc, #220]	; (80011d4 <main+0x4e0>)
 80010f6:	f002 fa77 	bl	80035e8 <HAL_TIM_PWM_Start>
		//			    }
		//			    if (c1) degree1 += 100;
		//			    else degree1 -= 100;
		//			    if (c2) degree2 += 100;
		//			    else degree2 -= 100;
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, degree1);
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <main+0x4e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, degree2);
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <main+0x4e0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
						HAL_Delay(60);
 800110e:	203c      	movs	r0, #60	; 0x3c
 8001110:	f000 fd7e 	bl	8001c10 <HAL_Delay>
					}
//					if(1)
					if ((a[0] < initial_lx + offset) && (a[0] > initial_sx - offset) && (a[1] < initial_ly + offset) && (a[1] > initial_sy - offset))
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	7bb9      	ldrb	r1, [r7, #14]
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	440b      	add	r3, r1
 800111c:	429a      	cmp	r2, r3
 800111e:	f6bf ae6c 	bge.w	8000dfa <main+0x106>
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	7bf9      	ldrb	r1, [r7, #15]
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	1acb      	subs	r3, r1, r3
 800112a:	429a      	cmp	r2, r3
 800112c:	f77f ae65 	ble.w	8000dfa <main+0x106>
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	7b39      	ldrb	r1, [r7, #12]
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	440b      	add	r3, r1
 8001138:	429a      	cmp	r2, r3
 800113a:	f6bf ae5e 	bge.w	8000dfa <main+0x106>
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	7b79      	ldrb	r1, [r7, #13]
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	1acb      	subs	r3, r1, r3
 8001146:	429a      	cmp	r2, r3
 8001148:	f77f ae57 	ble.w	8000dfa <main+0x106>
					{
						LCD_Clear(0,0,160,120,0xFFFF);
 800114c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2378      	movs	r3, #120	; 0x78
 8001154:	22a0      	movs	r2, #160	; 0xa0
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fd08 	bl	8000b6e <LCD_Clear>
						LCD_DrawString(0,40,"Target Found");
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <main+0x4e4>)
 8001160:	2128      	movs	r1, #40	; 0x28
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fd6c 	bl	8000c40 <LCD_DrawString>
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <main+0x4e8>)
 800116e:	f001 f82c 	bl	80021ca <HAL_GPIO_WritePin>
						HAL_Delay(1000);
 8001172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001176:	f000 fd4b 	bl	8001c10 <HAL_Delay>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800117a:	2108      	movs	r1, #8
 800117c:	4815      	ldr	r0, [pc, #84]	; (80011d4 <main+0x4e0>)
 800117e:	f002 fa33 	bl	80035e8 <HAL_TIM_PWM_Start>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200);
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <main+0x4e0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	22c8      	movs	r2, #200	; 0xc8
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
						HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f000 fd40 	bl	8001c10 <HAL_Delay>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001190:	2108      	movs	r1, #8
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <main+0x4e0>)
 8001194:	f002 fa28 	bl	80035e8 <HAL_TIM_PWM_Start>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 900);
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <main+0x4e0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 7261 	mov.w	r2, #900	; 0x384
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
						HAL_Delay(1000);
 80011a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a6:	f000 fd33 	bl	8001c10 <HAL_Delay>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011aa:	2108      	movs	r1, #8
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <main+0x4e0>)
 80011ae:	f002 fa1b 	bl	80035e8 <HAL_TIM_PWM_Start>
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 400);
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <main+0x4e0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <main+0x4e8>)
 80011c2:	f001 f802 	bl	80021ca <HAL_GPIO_WritePin>
	  	    LCD_Cam_Gram();
 80011c6:	e618      	b.n	8000dfa <main+0x106>
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40011000 	.word	0x40011000
 80011d4:	2000017c 	.word	0x2000017c
 80011d8:	08004c80 	.word	0x08004c80
 80011dc:	40011800 	.word	0x40011800

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 f88a 	bl	8004308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800121e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fcb5 	bl	8002b98 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001234:	f000 fa68 	bl	8001708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f001 ff22 	bl	800309c <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800125e:	f000 fa53 	bl	8001708 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001262:	2200      	movs	r2, #0
 8001264:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001268:	2000      	movs	r0, #0
 800126a:	f002 f801 	bl	8003270 <HAL_RCC_MCOConfig>
}
 800126e:	bf00      	nop
 8001270:	3740      	adds	r7, #64	; 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f000 ffc3 	bl	8002240 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fa22 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000128 	.word	0x20000128
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <MX_TIM3_Init+0x128>)
 8001306:	4a3e      	ldr	r2, [pc, #248]	; (8001400 <MX_TIM3_Init+0x12c>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <MX_TIM3_Init+0x128>)
 800130c:	2227      	movs	r2, #39	; 0x27
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <MX_TIM3_Init+0x128>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <MX_TIM3_Init+0x128>)
 8001318:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800131c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_TIM3_Init+0x128>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <MX_TIM3_Init+0x128>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132a:	4834      	ldr	r0, [pc, #208]	; (80013fc <MX_TIM3_Init+0x128>)
 800132c:	f002 f8b5 	bl	800349a <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001336:	f000 f9e7 	bl	8001708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001344:	4619      	mov	r1, r3
 8001346:	482d      	ldr	r0, [pc, #180]	; (80013fc <MX_TIM3_Init+0x128>)
 8001348:	f002 faca 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001352:	f000 f9d9 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001356:	4829      	ldr	r0, [pc, #164]	; (80013fc <MX_TIM3_Init+0x128>)
 8001358:	f002 f8ee 	bl	8003538 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001362:	f000 f9d1 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4619      	mov	r1, r3
 8001374:	4821      	ldr	r0, [pc, #132]	; (80013fc <MX_TIM3_Init+0x128>)
 8001376:	f002 fe5b 	bl	8004030 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001380:	f000 f9c2 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <MX_TIM3_Init+0x128>)
 800139c:	f002 f9de 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013a6:	f000 f9af 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2204      	movs	r2, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <MX_TIM3_Init+0x128>)
 80013b2:	f002 f9d3 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013bc:	f000 f9a4 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2208      	movs	r2, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_TIM3_Init+0x128>)
 80013c8:	f002 f9c8 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80013d2:	f000 f999 	bl	8001708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	220c      	movs	r2, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_TIM3_Init+0x128>)
 80013de:	f002 f9bd 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80013e8:	f000 f98e 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM3_Init+0x128>)
 80013ee:	f000 fa1f 	bl	8001830 <HAL_TIM_MspPostInit>

}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000017c 	.word	0x2000017c
 8001400:	40000400 	.word	0x40000400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001418:	4b82      	ldr	r3, [pc, #520]	; (8001624 <MX_GPIO_Init+0x220>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a81      	ldr	r2, [pc, #516]	; (8001624 <MX_GPIO_Init+0x220>)
 800141e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <MX_GPIO_Init+0x220>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <MX_GPIO_Init+0x220>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a7b      	ldr	r2, [pc, #492]	; (8001624 <MX_GPIO_Init+0x220>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b79      	ldr	r3, [pc, #484]	; (8001624 <MX_GPIO_Init+0x220>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b76      	ldr	r3, [pc, #472]	; (8001624 <MX_GPIO_Init+0x220>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a75      	ldr	r2, [pc, #468]	; (8001624 <MX_GPIO_Init+0x220>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b73      	ldr	r3, [pc, #460]	; (8001624 <MX_GPIO_Init+0x220>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <MX_GPIO_Init+0x220>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a6f      	ldr	r2, [pc, #444]	; (8001624 <MX_GPIO_Init+0x220>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <MX_GPIO_Init+0x220>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <MX_GPIO_Init+0x220>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a69      	ldr	r2, [pc, #420]	; (8001624 <MX_GPIO_Init+0x220>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b67      	ldr	r3, [pc, #412]	; (8001624 <MX_GPIO_Init+0x220>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_1, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2142      	movs	r1, #66	; 0x42
 8001494:	4864      	ldr	r0, [pc, #400]	; (8001628 <MX_GPIO_Init+0x224>)
 8001496:	f000 fe98 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	210c      	movs	r1, #12
 800149e:	4863      	ldr	r0, [pc, #396]	; (800162c <MX_GPIO_Init+0x228>)
 80014a0:	f000 fe93 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 80014aa:	4861      	ldr	r0, [pc, #388]	; (8001630 <MX_GPIO_Init+0x22c>)
 80014ac:	f000 fe8d 	bl	80021ca <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f241 0108 	movw	r1, #4104	; 0x1008
 80014b6:	485f      	ldr	r0, [pc, #380]	; (8001634 <MX_GPIO_Init+0x230>)
 80014b8:	f000 fe87 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c2:	485a      	ldr	r0, [pc, #360]	; (800162c <MX_GPIO_Init+0x228>)
 80014c4:	f000 fe81 	bl	80021ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_1;
 80014c8:	2342      	movs	r3, #66	; 0x42
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4619      	mov	r1, r3
 80014de:	4852      	ldr	r0, [pc, #328]	; (8001628 <MX_GPIO_Init+0x224>)
 80014e0:	f000 fcc8 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	4619      	mov	r1, r3
 80014f8:	484d      	ldr	r0, [pc, #308]	; (8001630 <MX_GPIO_Init+0x22c>)
 80014fa:	f000 fcbb 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014fe:	2308      	movs	r3, #8
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <MX_GPIO_Init+0x234>)
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4619      	mov	r1, r3
 8001510:	4847      	ldr	r0, [pc, #284]	; (8001630 <MX_GPIO_Init+0x22c>)
 8001512:	f000 fcaf 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	4840      	ldr	r0, [pc, #256]	; (800162c <MX_GPIO_Init+0x228>)
 800152a:	f000 fca3 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
 800152e:	f640 030c 	movw	r3, #2060	; 0x80c
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	4839      	ldr	r0, [pc, #228]	; (800162c <MX_GPIO_Init+0x228>)
 8001548:	f000 fc94 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 800154c:	f241 0330 	movw	r3, #4144	; 0x1030
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4619      	mov	r1, r3
 8001560:	4832      	ldr	r0, [pc, #200]	; (800162c <MX_GPIO_Init+0x228>)
 8001562:	f000 fc87 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 8001566:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4619      	mov	r1, r3
 800157e:	482c      	ldr	r0, [pc, #176]	; (8001630 <MX_GPIO_Init+0x22c>)
 8001580:	f000 fc78 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001584:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001588:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4619      	mov	r1, r3
 8001598:	4828      	ldr	r0, [pc, #160]	; (800163c <MX_GPIO_Init+0x238>)
 800159a:	f000 fc6b 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 800159e:	f241 0308 	movw	r3, #4104	; 0x1008
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4619      	mov	r1, r3
 80015b6:	481f      	ldr	r0, [pc, #124]	; (8001634 <MX_GPIO_Init+0x230>)
 80015b8:	f000 fc5c 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015c0:	2311      	movs	r3, #17
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4817      	ldr	r0, [pc, #92]	; (8001630 <MX_GPIO_Init+0x22c>)
 80015d4:	f000 fc4e 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	4619      	mov	r1, r3
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <MX_GPIO_Init+0x228>)
 80015ee:	f000 fc41 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	4619      	mov	r1, r3
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <MX_GPIO_Init+0x22c>)
 8001608:	f000 fc34 	bl	8001e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2009      	movs	r0, #9
 8001612:	f000 fbf8 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001616:	2009      	movs	r0, #9
 8001618:	f000 fc11 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40011800 	.word	0x40011800
 800162c:	40010800 	.word	0x40010800
 8001630:	40011000 	.word	0x40011000
 8001634:	40011400 	.word	0x40011400
 8001638:	10210000 	.word	0x10210000
 800163c:	40010c00 	.word	0x40010c00

08001640 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_FSMC_Init+0xbc>)
 800165a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800165e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001662:	4a27      	ldr	r2, [pc, #156]	; (8001700 <MX_FSMC_Init+0xc0>)
 8001664:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <MX_FSMC_Init+0xbc>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <MX_FSMC_Init+0xbc>)
 800167a:	2210      	movs	r2, #16
 800167c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_FSMC_Init+0xbc>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_FSMC_Init+0xbc>)
 8001698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_FSMC_Init+0xbc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_FSMC_Init+0xbc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_FSMC_Init+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_FSMC_Init+0xbc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80016b6:	230f      	movs	r3, #15
 80016b8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80016ba:	230f      	movs	r3, #15
 80016bc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80016c2:	230f      	movs	r3, #15
 80016c4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80016c6:	2310      	movs	r3, #16
 80016c8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80016ca:	2311      	movs	r3, #17
 80016cc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <MX_FSMC_Init+0xbc>)
 80016da:	f001 fe91 	bl	8003400 <HAL_SRAM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80016e4:	f000 f810 	bl	8001708 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_FSMC_Init+0xc4>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <MX_FSMC_Init+0xc4>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200001c4 	.word	0x200001c4
 8001700:	a0000104 	.word	0xa0000104
 8001704:	40010000 	.word	0x40010000

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_MspInit+0x5c>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_MspInit+0x5c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_MspInit+0x5c>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_MspInit+0x5c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_MspInit+0x5c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x5c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_MspInit+0x60>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_MspInit+0x60>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000

08001778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_I2C_MspInit+0x70>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d123      	bne.n	80017e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_I2C_MspInit+0x74>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <HAL_I2C_MspInit+0x74>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_I2C_MspInit+0x74>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b0:	23c0      	movs	r3, #192	; 0xc0
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b4:	2312      	movs	r3, #18
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <HAL_I2C_MspInit+0x78>)
 80017c4:	f000 fb56 	bl	8001e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_I2C_MspInit+0x74>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_I2C_MspInit+0x74>)
 80017ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d2:	61d3      	str	r3, [r2, #28]
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_I2C_MspInit+0x74>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40005400 	.word	0x40005400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_Base_MspInit+0x34>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10b      	bne.n	800181e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_TIM_Base_MspInit+0x38>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40000400 	.word	0x40000400
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_TIM_MspPostInit+0x88>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d12f      	bne.n	80018b0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_TIM_MspPostInit+0x8c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <HAL_TIM_MspPostInit+0x90>)
 8001894:	f000 faee 	bl	8001e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001898:	2303      	movs	r3, #3
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <HAL_TIM_MspPostInit+0x94>)
 80018ac:	f000 fae2 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_FSMC_MspInit+0x78>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d129      	bne.n	8001938 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_FSMC_MspInit+0x78>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_FSMC_MspInit+0x7c>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_FSMC_MspInit+0x7c>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_FSMC_MspInit+0x7c>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001902:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001906:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <HAL_FSMC_MspInit+0x80>)
 8001918:	f000 faac 	bl	8001e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800191c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001920:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <HAL_FSMC_MspInit+0x84>)
 8001932:	f000 fa9f 	bl	8001e74 <HAL_GPIO_Init>
 8001936:	e000      	b.n	800193a <HAL_FSMC_MspInit+0x72>
    return;
 8001938:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000210 	.word	0x20000210
 8001944:	40021000 	.word	0x40021000
 8001948:	40011800 	.word	0x40011800
 800194c:	40011400 	.word	0x40011400

08001950 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001958:	f7ff ffb6 	bl	80018c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <HardFault_Handler+0x4>

08001976 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <MemManage_Handler+0x4>

0800197c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <BusFault_Handler+0x4>

08001982 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <UsageFault_Handler+0x4>

08001988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f912 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <EXTI3_IRQHandler+0x64>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <EXTI3_IRQHandler+0x68>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10f      	bne.n	80019f0 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <EXTI3_IRQHandler+0x6c>)
 80019d2:	2210      	movs	r2, #16
 80019d4:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <EXTI3_IRQHandler+0x70>)
 80019d8:	2208      	movs	r2, #8
 80019da:	611a      	str	r2, [r3, #16]
        Ov7725_vsync = 1;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <EXTI3_IRQHandler+0x68>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <EXTI3_IRQHandler+0x70>)
 80019e4:	2208      	movs	r2, #8
 80019e6:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <EXTI3_IRQHandler+0x6c>)
 80019ea:	2210      	movs	r2, #16
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	e009      	b.n	8001a04 <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <EXTI3_IRQHandler+0x68>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <EXTI3_IRQHandler+0x70>)
 80019fa:	2208      	movs	r2, #8
 80019fc:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <EXTI3_IRQHandler+0x68>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <EXTI3_IRQHandler+0x64>)
 8001a06:	2208      	movs	r2, #8
 8001a08:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001a0a:	2008      	movs	r0, #8
 8001a0c:	f000 fc0e 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a10:	2008      	movs	r0, #8
 8001a12:	f000 fbf3 	bl	80021fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40010400 	.word	0x40010400
 8001a20:	2000020c 	.word	0x2000020c
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40011400 	.word	0x40011400

08001a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <_sbrk+0x5c>)
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <_sbrk+0x60>)
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <_sbrk+0x64>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <_sbrk+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d207      	bcs.n	8001a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a5c:	f002 fc2a 	bl	80042b4 <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	220c      	movs	r2, #12
 8001a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6a:	e009      	b.n	8001a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <_sbrk+0x64>)
 8001a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20010000 	.word	0x20010000
 8001a8c:	00000400 	.word	0x00000400
 8001a90:	20000214 	.word	0x20000214
 8001a94:	20000230 	.word	0x20000230

08001a98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <SystemInit+0x5c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <SystemInit+0x5c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <SystemInit+0x5c>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4911      	ldr	r1, [pc, #68]	; (8001af4 <SystemInit+0x5c>)
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <SystemInit+0x60>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <SystemInit+0x5c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <SystemInit+0x5c>)
 8001aba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <SystemInit+0x5c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SystemInit+0x5c>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <SystemInit+0x5c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <SystemInit+0x5c>)
 8001ad6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ada:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SystemInit+0x5c>)
 8001ade:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ae2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SystemInit+0x64>)
 8001ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aea:	609a      	str	r2, [r3, #8]
#endif 
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	f8ff0000 	.word	0xf8ff0000
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b02:	e003      	b.n	8001b0c <LoopCopyDataInit>

08001b04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b0a:	3104      	adds	r1, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b14:	d3f6      	bcc.n	8001b04 <CopyDataInit>
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b18:	e002      	b.n	8001b20 <LoopFillZerobss>

08001b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b1c:	f842 3b04 	str.w	r3, [r2], #4

08001b20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b24:	d3f9      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b26:	f7ff ffb7 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f002 fbc9 	bl	80042c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2e:	f7ff f8e1 	bl	8000cf4 <main>
  bx lr
 8001b32:	4770      	bx	lr
  ldr r3, =_sidata
 8001b34:	080052e8 	.word	0x080052e8
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b3c:	2000010c 	.word	0x2000010c
  ldr r2, =_sbss
 8001b40:	2000010c 	.word	0x2000010c
  ldr r3, = _ebss
 8001b44:	2000022c 	.word	0x2000022c

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_Init+0x28>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_Init+0x28>)
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f947 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fdd4 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f95f 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb4:	f000 f927 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000009c 	.word	0x2000009c
 8001bd0:	200000a4 	.word	0x200000a4
 8001bd4:	200000a0 	.word	0x200000a0

08001bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x1c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x20>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	200000a4 	.word	0x200000a4
 8001bf8:	20000218 	.word	0x20000218

08001bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <HAL_GetTick+0x10>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000218 	.word	0x20000218

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffe0 	bl	8001bfc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200000a4 	.word	0x200000a4

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <__NVIC_EnableIRQ+0x34>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f7ff ff90 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff2d 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff42 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff35 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b08b      	sub	sp, #44	; 0x2c
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e179      	b.n	800217c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8168 	bne.w	8002176 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x290>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d05e      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001eb0:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_GPIO_Init+0x290>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d875      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x294>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d058      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ebc:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_GPIO_Init+0x294>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d86f      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x298>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d052      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ec8:	4a90      	ldr	r2, [pc, #576]	; (800210c <HAL_GPIO_Init+0x298>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d869      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ece:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_GPIO_Init+0x29c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04c      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ed4:	4a8e      	ldr	r2, [pc, #568]	; (8002110 <HAL_GPIO_Init+0x29c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d863      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eda:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_GPIO_Init+0x2a0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d046      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a8c      	ldr	r2, [pc, #560]	; (8002114 <HAL_GPIO_Init+0x2a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d85d      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_GPIO_Init+0xcc>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d859      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <HAL_GPIO_Init+0x80>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f5b 	.word	0x08001f5b
 8001f00:	08001f9d 	.word	0x08001f9d
 8001f04:	08001fa3 	.word	0x08001fa3
 8001f08:	08001fa3 	.word	0x08001fa3
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08001fa3 	.word	0x08001fa3
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001fa3 	.word	0x08001fa3
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fa3 	.word	0x08001fa3
 8001f24:	08001fa3 	.word	0x08001fa3
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001fa3 	.word	0x08001fa3
 8001f30:	08001fa3 	.word	0x08001fa3
 8001f34:	08001fa3 	.word	0x08001fa3
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	4a75      	ldr	r2, [pc, #468]	; (8002118 <HAL_GPIO_Init+0x2a4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f46:	e02c      	b.n	8001fa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e029      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	3304      	adds	r3, #4
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e024      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e01f      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e01a      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e013      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	611a      	str	r2, [r3, #16]
          break;
 8001f8e:	e009      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	615a      	str	r2, [r3, #20]
          break;
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          break;
 8001fa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d801      	bhi.n	8001fae <HAL_GPIO_Init+0x13a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_Init+0x13e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d802      	bhi.n	8001fc0 <HAL_GPIO_Init+0x14c>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x152>
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	210f      	movs	r1, #15
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80c1 	beq.w	8002176 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff4:	4b49      	ldr	r3, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2a8>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a48      	ldr	r2, [pc, #288]	; (800211c <HAL_GPIO_Init+0x2a8>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_GPIO_Init+0x2a8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_GPIO_Init+0x2ac>)
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <HAL_GPIO_Init+0x2b0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d01f      	beq.n	8002078 <HAL_GPIO_Init+0x204>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <HAL_GPIO_Init+0x2b4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d019      	beq.n	8002074 <HAL_GPIO_Init+0x200>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3a      	ldr	r2, [pc, #232]	; (800212c <HAL_GPIO_Init+0x2b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1fc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a39      	ldr	r2, [pc, #228]	; (8002130 <HAL_GPIO_Init+0x2bc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1f8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_GPIO_Init+0x2c0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1f4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1f0>
 8002060:	2305      	movs	r3, #5
 8002062:	e00a      	b.n	800207a <HAL_GPIO_Init+0x206>
 8002064:	2306      	movs	r3, #6
 8002066:	e008      	b.n	800207a <HAL_GPIO_Init+0x206>
 8002068:	2304      	movs	r3, #4
 800206a:	e006      	b.n	800207a <HAL_GPIO_Init+0x206>
 800206c:	2303      	movs	r3, #3
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x206>
 8002070:	2302      	movs	r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x206>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x206>
 8002078:	2300      	movs	r3, #0
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208a:	4925      	ldr	r1, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x2ac>)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4924      	ldr	r1, [pc, #144]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4920      	ldr	r1, [pc, #128]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020bc:	4013      	ands	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	491a      	ldr	r1, [pc, #104]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d025      	beq.n	8002140 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4910      	ldr	r1, [pc, #64]	; (800213c <HAL_GPIO_Init+0x2c8>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e025      	b.n	800214e <HAL_GPIO_Init+0x2da>
 8002102:	bf00      	nop
 8002104:	10320000 	.word	0x10320000
 8002108:	10310000 	.word	0x10310000
 800210c:	10220000 	.word	0x10220000
 8002110:	10210000 	.word	0x10210000
 8002114:	10120000 	.word	0x10120000
 8002118:	10110000 	.word	0x10110000
 800211c:	40021000 	.word	0x40021000
 8002120:	40010000 	.word	0x40010000
 8002124:	40010800 	.word	0x40010800
 8002128:	40010c00 	.word	0x40010c00
 800212c:	40011000 	.word	0x40011000
 8002130:	40011400 	.word	0x40011400
 8002134:	40011800 	.word	0x40011800
 8002138:	40011c00 	.word	0x40011c00
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4913      	ldr	r1, [pc, #76]	; (8002198 <HAL_GPIO_Init+0x324>)
 800214a:	4013      	ands	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_GPIO_Init+0x324>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
 8002166:	e006      	b.n	8002176 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_GPIO_Init+0x324>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4909      	ldr	r1, [pc, #36]	; (8002198 <HAL_GPIO_Init+0x324>)
 8002172:	4013      	ands	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ae7e 	bne.w	8001e88 <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	; 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	807b      	strh	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021da:	787b      	ldrb	r3, [r7, #1]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	041a      	lsls	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f806 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fa86 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f001 f87a 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	460b      	mov	r3, r1
 80024dc:	813b      	strh	r3, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff fb8b 	bl	8001bfc <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 80d9 	bne.w	80026a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	496d      	ldr	r1, [pc, #436]	; (80026b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f971 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	e0cc      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Write+0x56>
 800251a:	2302      	movs	r3, #2
 800251c:	e0c5      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d007      	beq.n	8002544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	; 0x21
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002586:	88f8      	ldrh	r0, [r7, #6]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f890 	bl	80026bc <I2C_RequestMemoryWrite>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d052      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e081      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa36 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11b      	bne.n	8002648 <HAL_I2C_Mem_Write+0x180>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1aa      	bne.n	80025a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa29 	bl	8002aac <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e016      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	460b      	mov	r3, r1
 80026d0:	813b      	strh	r3, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f878 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270c:	d103      	bne.n	8002716 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e05f      	b.n	80027da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	492d      	ldr	r1, [pc, #180]	; (80027e4 <I2C_RequestMemoryWrite+0x128>)
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8d3 	bl	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04c      	b.n	80027da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f95e 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e02b      	b.n	80027da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002788:	893b      	ldrh	r3, [r7, #8]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	611a      	str	r2, [r3, #16]
 8002792:	e021      	b.n	80027d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002794:	893b      	ldrh	r3, [r7, #8]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f938 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d107      	bne.n	80027ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e005      	b.n	80027da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ce:	893b      	ldrh	r3, [r7, #8]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	00010002 	.word	0x00010002

080027e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f8:	e048      	b.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002800:	d044      	beq.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7ff f9fb 	bl	8001bfc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d139      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10d      	bne.n	800283e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	e00c      	b.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x70>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	43da      	mvns	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	429a      	cmp	r2, r3
 800285c:	d116      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e023      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10d      	bne.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	e00c      	b.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	43da      	mvns	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d093      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ea:	e071      	b.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fa:	d123      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e067      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294a:	d041      	beq.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7ff f956 	bl	8001bfc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d136      	bne.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10c      	bne.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e00b      	b.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e021      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d10c      	bne.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e00b      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f af6d 	bne.w	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f886 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d028      	beq.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f8db 	bl	8001bfc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d016      	beq.n	8002a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d1c3      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab8:	e034      	b.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f83e 	bl	8002b3c <I2C_IsAcknowledgeFailed>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e034      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d028      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7ff f893 	bl	8001bfc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11d      	bne.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d016      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e007      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d1c3      	bne.n	8002aba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b52:	d11b      	bne.n	8002b8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e272      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8087 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d112      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d168      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e24c      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7f      	ldr	r2, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e02e      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbc>
 8002c3a:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a71      	ldr	r2, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xd4>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6a      	ldr	r2, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a67      	ldr	r2, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe ffc2 	bl	8001bfc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe ffbe 	bl	8001bfc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e200      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe4>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ffae 	bl	8001bfc <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe ffaa 	bl	8001bfc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1ec      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x10c>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
 8002cea:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1c0      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe ff63 	bl	8001bfc <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe ff5f 	bl	8001bfc <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1a1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4927      	ldr	r1, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe ff42 	bl	8001bfc <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe ff3e 	bl	8001bfc <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e180      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d03a      	beq.n	8002e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe ff22 	bl	8001bfc <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe ff1e 	bl	8001bfc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e160      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 faf2 	bl	80033c4 <RCC_Delay>
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fe ff08 	bl	8001bfc <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe ff04 	bl	8001bfc <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d908      	bls.n	8002e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e146      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	42420000 	.word	0x42420000
 8002e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e9      	bne.n	8002df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a6 	beq.w	8002f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a87      	ldr	r2, [pc, #540]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e62:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7e      	ldr	r2, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fec5 	bl	8001bfc <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fe fec1 	bl	8001bfc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b64      	cmp	r3, #100	; 0x64
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e103      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x334>
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a69      	ldr	r2, [pc, #420]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a66      	ldr	r2, [pc, #408]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	e01c      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x356>
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0x36e>
 8002eee:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d015      	beq.n	8002f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fe75 	bl	8001bfc <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe fe71 	bl	8001bfc <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0b1      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ee      	beq.n	8002f16 <HAL_RCC_OscConfig+0x37e>
 8002f38:	e014      	b.n	8002f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fe5f 	bl	8001bfc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fe5b 	bl	8001bfc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e09b      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ee      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8087 	beq.w	800308e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d061      	beq.n	8003050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d146      	bne.n	8003022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fe2f 	bl	8001bfc <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fe2b 	bl	8001bfc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e06d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d108      	bne.n	8002fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4921      	ldr	r1, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a19      	ldr	r1, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fdff 	bl	8001bfc <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fdfb 	bl	8001bfc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
 8003020:	e035      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fde8 	bl	8001bfc <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fde4 	bl	8001bfc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e026      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x4c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x498>
 800304e:	e01e      	b.n	800308e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e019      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
 800305c:	40021000 	.word	0x40021000
 8003060:	40007000 	.word	0x40007000
 8003064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x500>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe fd36 	bl	8001bfc <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fd32 	bl	8001bfc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f859 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fc94 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	08005280 	.word	0x08005280
 8003268:	2000009c 	.word	0x2000009c
 800326c:	200000a0 	.word	0x200000a0

08003270 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800327c:	f107 0318 	add.w	r3, r7, #24
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800329a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <HAL_RCC_MCOConfig+0x68>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <HAL_RCC_MCOConfig+0x68>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_MCOConfig+0x68>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80032b4:	f107 0318 	add.w	r3, r7, #24
 80032b8:	4619      	mov	r1, r3
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <HAL_RCC_MCOConfig+0x6c>)
 80032bc:	f7fe fdda 	bl	8001e74 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RCC_MCOConfig+0x68>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_MCOConfig+0x68>)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010800 	.word	0x40010800

080032e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x30>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x36>
 800330e:	e027      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003312:	613b      	str	r3, [r7, #16]
      break;
 8003314:	e027      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d010      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_GetSysClockFreq+0x94>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	0c5b      	lsrs	r3, r3, #17
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a0d      	ldr	r2, [pc, #52]	; (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e004      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	613b      	str	r3, [r7, #16]
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetSysClockFreq+0x98>)
 8003362:	613b      	str	r3, [r7, #16]
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	693b      	ldr	r3, [r7, #16]
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	08005298 	.word	0x08005298
 8003380:	080052a8 	.word	0x080052a8
 8003384:	003d0900 	.word	0x003d0900

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <HAL_RCC_GetHCLKFreq+0x10>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	2000009c 	.word	0x2000009c

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033a0:	f7ff fff2 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08005290 	.word	0x08005290

080033c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <RCC_Delay+0x34>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <RCC_Delay+0x38>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0a5b      	lsrs	r3, r3, #9
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033e0:	bf00      	nop
  }
  while (Delay --);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e5a      	subs	r2, r3, #1
 80033e6:	60fa      	str	r2, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <RCC_Delay+0x1c>
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	2000009c 	.word	0x2000009c
 80033fc:	10624dd3 	.word	0x10624dd3

08003400 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_SRAM_Init+0x1c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d101      	bne.n	8003420 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e038      	b.n	8003492 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7fe fa8b 	bl	8001950 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3308      	adds	r3, #8
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f000 fe5f 	bl	8004108 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	461a      	mov	r2, r3
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	f000 fec1 	bl	80041dc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6858      	ldr	r0, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	f000 feec 	bl	8004244 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	6892      	ldr	r2, [r2, #8]
 8003474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	f041 0101 	orr.w	r1, r1, #1
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e041      	b.n	8003530 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe f997 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fac9 	bl	8003a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e041      	b.n	80035ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f839 	bl	80035d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fa7a 	bl	8003a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x24>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e022      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d109      	bne.n	8003626 <HAL_TIM_PWM_Start+0x3e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e015      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d109      	bne.n	8003640 <HAL_TIM_PWM_Start+0x58>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e008      	b.n	8003652 <HAL_TIM_PWM_Start+0x6a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e072      	b.n	8003740 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_TIM_PWM_Start+0x82>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	e013      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Start+0x92>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	e00b      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	e003      	b.n	8003692 <HAL_TIM_PWM_Start+0xaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2201      	movs	r2, #1
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fca4 	bl	8003fe8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <HAL_TIM_PWM_Start+0x160>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_PWM_Start+0xcc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_TIM_PWM_Start+0x164>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_TIM_PWM_Start+0xd0>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_TIM_PWM_Start+0xd2>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_TIM_PWM_Start+0x160>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_TIM_PWM_Start+0x122>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_TIM_PWM_Start+0x164>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_TIM_PWM_Start+0x122>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d00e      	beq.n	800370a <HAL_TIM_PWM_Start+0x122>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <HAL_TIM_PWM_Start+0x168>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_TIM_PWM_Start+0x122>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <HAL_TIM_PWM_Start+0x16c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_PWM_Start+0x122>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_TIM_PWM_Start+0x170>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d111      	bne.n	800372e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d010      	beq.n	800373e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	e007      	b.n	800373e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40013400 	.word	0x40013400
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003776:	2302      	movs	r3, #2
 8003778:	e0ae      	b.n	80038d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	f200 809f 	bhi.w	80038c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080038c9 	.word	0x080038c9
 8003798:	080038c9 	.word	0x080038c9
 800379c:	080038c9 	.word	0x080038c9
 80037a0:	08003805 	.word	0x08003805
 80037a4:	080038c9 	.word	0x080038c9
 80037a8:	080038c9 	.word	0x080038c9
 80037ac:	080038c9 	.word	0x080038c9
 80037b0:	08003847 	.word	0x08003847
 80037b4:	080038c9 	.word	0x080038c9
 80037b8:	080038c9 	.word	0x080038c9
 80037bc:	080038c9 	.word	0x080038c9
 80037c0:	08003887 	.word	0x08003887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f9ca 	bl	8003b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0204 	bic.w	r2, r2, #4
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
      break;
 8003802:	e064      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fa1a 	bl	8003c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6999      	ldr	r1, [r3, #24]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
      break;
 8003844:	e043      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fa6d 	bl	8003d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0208 	orr.w	r2, r2, #8
 8003860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
      break;
 8003884:	e023      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fac1 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69d9      	ldr	r1, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	021a      	lsls	r2, r3, #8
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	61da      	str	r2, [r3, #28]
      break;
 80038c6:	e002      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75fb      	strb	r3, [r7, #23]
      break;
 80038cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0b4      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x186>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003934:	d03e      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	f200 8087 	bhi.w	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003942:	f000 8086 	beq.w	8003a52 <HAL_TIM_ConfigClockSource+0x172>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	d87f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b70      	cmp	r3, #112	; 0x70
 800394e:	d01a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xa6>
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d87b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b60      	cmp	r3, #96	; 0x60
 8003956:	d050      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x11a>
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d877      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b50      	cmp	r3, #80	; 0x50
 800395e:	d03c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xfa>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d873      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d058      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x13a>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d86f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b30      	cmp	r3, #48	; 0x30
 800396e:	d064      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d867      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b10      	cmp	r3, #16
 8003982:	d05a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	e062      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f000 fb08 	bl	8003faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e04f      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f000 faf1 	bl	8003faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 fa68 	bl	8003ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	; 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fabf 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 fa86 	bl	8003f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	; 0x60
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 faaf 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 fa48 	bl	8003ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fa9f 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 fa96 	bl	8003f76 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <TIM_Base_SetConfig+0xe0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d013      	beq.n	8003ab0 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00f      	beq.n	8003ab0 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d00b      	beq.n	8003ab0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <TIM_Base_SetConfig+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <TIM_Base_SetConfig+0xec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <TIM_Base_SetConfig+0xf0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d108      	bne.n	8003ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <TIM_Base_SetConfig+0xe0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <TIM_Base_SetConfig+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00f      	beq.n	8003af2 <TIM_Base_SetConfig+0x82>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d00b      	beq.n	8003af2 <TIM_Base_SetConfig+0x82>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <TIM_Base_SetConfig+0xe8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_Base_SetConfig+0x82>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_Base_SetConfig+0xec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_Base_SetConfig+0x82>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <TIM_Base_SetConfig+0xf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d108      	bne.n	8003b04 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <TIM_Base_SetConfig+0xe0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0xc8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <TIM_Base_SetConfig+0xe4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d103      	bne.n	8003b40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	615a      	str	r2, [r3, #20]
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40013400 	.word	0x40013400
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00

08003b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0201 	bic.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <TIM_OC1_SetConfig+0xd8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC1_SetConfig+0x64>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <TIM_OC1_SetConfig+0xdc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0308 	bic.w	r3, r3, #8
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <TIM_OC1_SetConfig+0xd8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_OC1_SetConfig+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <TIM_OC1_SetConfig+0xdc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400

08003c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 0210 	bic.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0320 	bic.w	r3, r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <TIM_OC2_SetConfig+0xe0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0x68>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <TIM_OC2_SetConfig+0xe4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <TIM_OC2_SetConfig+0xe0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x94>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <TIM_OC2_SetConfig+0xe4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d113      	bne.n	8003d00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400

08003d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_OC3_SetConfig+0x66>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC3_SetConfig+0xe0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC3_SetConfig+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC3_SetConfig+0xe4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d113      	bne.n	8003de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <TIM_OC4_SetConfig+0xa0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC4_SetConfig+0x68>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <TIM_OC4_SetConfig+0xa4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d109      	bne.n	8003e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40013400 	.word	0x40013400

08003ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f023 0201 	bic.w	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 030a 	bic.w	r3, r3, #10
 8003ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0210 	bic.w	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	031b      	lsls	r3, r3, #12
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f043 0307 	orr.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b087      	sub	sp, #28
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e050      	b.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00e      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a15      	ldr	r2, [pc, #84]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a14      	ldr	r2, [pc, #80]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10c      	bne.n	80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00

08004108 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	f023 0101 	bic.w	r1, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d102      	bne.n	8004138 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004132:	2340      	movs	r3, #64	; 0x40
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e001      	b.n	800413c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004148:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800414e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004154:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800415a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004160:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004166:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800416c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004172:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004178:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <FSMC_NORSRAM_Init+0xd0>)
 8004198:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80041a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	ea02 0103 	and.w	r1, r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4319      	orrs	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	0008fb7f 	.word	0x0008fb7f

080041dc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	431a      	orrs	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	431a      	orrs	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	3b01      	subs	r3, #1
 8004218:	051b      	lsls	r3, r3, #20
 800421a:	431a      	orrs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	3b02      	subs	r3, #2
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	431a      	orrs	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	3201      	adds	r2, #1
 8004230:	4319      	orrs	r1, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004258:	d11d      	bne.n	8004296 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004264:	4013      	ands	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	6852      	ldr	r2, [r2, #4]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	4311      	orrs	r1, r2
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	6892      	ldr	r2, [r2, #8]
 8004276:	0212      	lsls	r2, r2, #8
 8004278:	4311      	orrs	r1, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	6992      	ldr	r2, [r2, #24]
 800427e:	4311      	orrs	r1, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	68d2      	ldr	r2, [r2, #12]
 8004284:	0412      	lsls	r2, r2, #16
 8004286:	430a      	orrs	r2, r1
 8004288:	ea43 0102 	orr.w	r1, r3, r2
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004294:	e005      	b.n	80042a2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	cff00000 	.word	0xcff00000

080042b4 <__errno>:
 80042b4:	4b01      	ldr	r3, [pc, #4]	; (80042bc <__errno+0x8>)
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	200000a8 	.word	0x200000a8

080042c0 <__libc_init_array>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	2600      	movs	r6, #0
 80042c4:	4d0c      	ldr	r5, [pc, #48]	; (80042f8 <__libc_init_array+0x38>)
 80042c6:	4c0d      	ldr	r4, [pc, #52]	; (80042fc <__libc_init_array+0x3c>)
 80042c8:	1b64      	subs	r4, r4, r5
 80042ca:	10a4      	asrs	r4, r4, #2
 80042cc:	42a6      	cmp	r6, r4
 80042ce:	d109      	bne.n	80042e4 <__libc_init_array+0x24>
 80042d0:	f000 fc9c 	bl	8004c0c <_init>
 80042d4:	2600      	movs	r6, #0
 80042d6:	4d0a      	ldr	r5, [pc, #40]	; (8004300 <__libc_init_array+0x40>)
 80042d8:	4c0a      	ldr	r4, [pc, #40]	; (8004304 <__libc_init_array+0x44>)
 80042da:	1b64      	subs	r4, r4, r5
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	42a6      	cmp	r6, r4
 80042e0:	d105      	bne.n	80042ee <__libc_init_array+0x2e>
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
 80042e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e8:	4798      	blx	r3
 80042ea:	3601      	adds	r6, #1
 80042ec:	e7ee      	b.n	80042cc <__libc_init_array+0xc>
 80042ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f2:	4798      	blx	r3
 80042f4:	3601      	adds	r6, #1
 80042f6:	e7f2      	b.n	80042de <__libc_init_array+0x1e>
 80042f8:	080052e0 	.word	0x080052e0
 80042fc:	080052e0 	.word	0x080052e0
 8004300:	080052e0 	.word	0x080052e0
 8004304:	080052e4 	.word	0x080052e4

08004308 <memset>:
 8004308:	4603      	mov	r3, r0
 800430a:	4402      	add	r2, r0
 800430c:	4293      	cmp	r3, r2
 800430e:	d100      	bne.n	8004312 <memset+0xa>
 8004310:	4770      	bx	lr
 8004312:	f803 1b01 	strb.w	r1, [r3], #1
 8004316:	e7f9      	b.n	800430c <memset+0x4>

08004318 <siprintf>:
 8004318:	b40e      	push	{r1, r2, r3}
 800431a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800431e:	b500      	push	{lr}
 8004320:	b09c      	sub	sp, #112	; 0x70
 8004322:	ab1d      	add	r3, sp, #116	; 0x74
 8004324:	9002      	str	r0, [sp, #8]
 8004326:	9006      	str	r0, [sp, #24]
 8004328:	9107      	str	r1, [sp, #28]
 800432a:	9104      	str	r1, [sp, #16]
 800432c:	4808      	ldr	r0, [pc, #32]	; (8004350 <siprintf+0x38>)
 800432e:	4909      	ldr	r1, [pc, #36]	; (8004354 <siprintf+0x3c>)
 8004330:	f853 2b04 	ldr.w	r2, [r3], #4
 8004334:	9105      	str	r1, [sp, #20]
 8004336:	6800      	ldr	r0, [r0, #0]
 8004338:	a902      	add	r1, sp, #8
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	f000 f868 	bl	8004410 <_svfiprintf_r>
 8004340:	2200      	movs	r2, #0
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	b01c      	add	sp, #112	; 0x70
 8004348:	f85d eb04 	ldr.w	lr, [sp], #4
 800434c:	b003      	add	sp, #12
 800434e:	4770      	bx	lr
 8004350:	200000a8 	.word	0x200000a8
 8004354:	ffff0208 	.word	0xffff0208

08004358 <__ssputs_r>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	688e      	ldr	r6, [r1, #8]
 800435e:	4682      	mov	sl, r0
 8004360:	429e      	cmp	r6, r3
 8004362:	460c      	mov	r4, r1
 8004364:	4690      	mov	r8, r2
 8004366:	461f      	mov	r7, r3
 8004368:	d838      	bhi.n	80043dc <__ssputs_r+0x84>
 800436a:	898a      	ldrh	r2, [r1, #12]
 800436c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004370:	d032      	beq.n	80043d8 <__ssputs_r+0x80>
 8004372:	6825      	ldr	r5, [r4, #0]
 8004374:	6909      	ldr	r1, [r1, #16]
 8004376:	3301      	adds	r3, #1
 8004378:	eba5 0901 	sub.w	r9, r5, r1
 800437c:	6965      	ldr	r5, [r4, #20]
 800437e:	444b      	add	r3, r9
 8004380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004388:	106d      	asrs	r5, r5, #1
 800438a:	429d      	cmp	r5, r3
 800438c:	bf38      	it	cc
 800438e:	461d      	movcc	r5, r3
 8004390:	0553      	lsls	r3, r2, #21
 8004392:	d531      	bpl.n	80043f8 <__ssputs_r+0xa0>
 8004394:	4629      	mov	r1, r5
 8004396:	f000 fb6f 	bl	8004a78 <_malloc_r>
 800439a:	4606      	mov	r6, r0
 800439c:	b950      	cbnz	r0, 80043b4 <__ssputs_r+0x5c>
 800439e:	230c      	movs	r3, #12
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a4:	f8ca 3000 	str.w	r3, [sl]
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b4:	464a      	mov	r2, r9
 80043b6:	6921      	ldr	r1, [r4, #16]
 80043b8:	f000 face 	bl	8004958 <memcpy>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	6126      	str	r6, [r4, #16]
 80043ca:	444e      	add	r6, r9
 80043cc:	6026      	str	r6, [r4, #0]
 80043ce:	463e      	mov	r6, r7
 80043d0:	6165      	str	r5, [r4, #20]
 80043d2:	eba5 0509 	sub.w	r5, r5, r9
 80043d6:	60a5      	str	r5, [r4, #8]
 80043d8:	42be      	cmp	r6, r7
 80043da:	d900      	bls.n	80043de <__ssputs_r+0x86>
 80043dc:	463e      	mov	r6, r7
 80043de:	4632      	mov	r2, r6
 80043e0:	4641      	mov	r1, r8
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	f000 fac6 	bl	8004974 <memmove>
 80043e8:	68a3      	ldr	r3, [r4, #8]
 80043ea:	2000      	movs	r0, #0
 80043ec:	1b9b      	subs	r3, r3, r6
 80043ee:	60a3      	str	r3, [r4, #8]
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	4433      	add	r3, r6
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	e7db      	b.n	80043b0 <__ssputs_r+0x58>
 80043f8:	462a      	mov	r2, r5
 80043fa:	f000 fbb1 	bl	8004b60 <_realloc_r>
 80043fe:	4606      	mov	r6, r0
 8004400:	2800      	cmp	r0, #0
 8004402:	d1e1      	bne.n	80043c8 <__ssputs_r+0x70>
 8004404:	4650      	mov	r0, sl
 8004406:	6921      	ldr	r1, [r4, #16]
 8004408:	f000 face 	bl	80049a8 <_free_r>
 800440c:	e7c7      	b.n	800439e <__ssputs_r+0x46>
	...

08004410 <_svfiprintf_r>:
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	4698      	mov	r8, r3
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	4607      	mov	r7, r0
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	460d      	mov	r5, r1
 800441e:	4614      	mov	r4, r2
 8004420:	b09d      	sub	sp, #116	; 0x74
 8004422:	d50e      	bpl.n	8004442 <_svfiprintf_r+0x32>
 8004424:	690b      	ldr	r3, [r1, #16]
 8004426:	b963      	cbnz	r3, 8004442 <_svfiprintf_r+0x32>
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	f000 fb25 	bl	8004a78 <_malloc_r>
 800442e:	6028      	str	r0, [r5, #0]
 8004430:	6128      	str	r0, [r5, #16]
 8004432:	b920      	cbnz	r0, 800443e <_svfiprintf_r+0x2e>
 8004434:	230c      	movs	r3, #12
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800443c:	e0d1      	b.n	80045e2 <_svfiprintf_r+0x1d2>
 800443e:	2340      	movs	r3, #64	; 0x40
 8004440:	616b      	str	r3, [r5, #20]
 8004442:	2300      	movs	r3, #0
 8004444:	9309      	str	r3, [sp, #36]	; 0x24
 8004446:	2320      	movs	r3, #32
 8004448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800444c:	2330      	movs	r3, #48	; 0x30
 800444e:	f04f 0901 	mov.w	r9, #1
 8004452:	f8cd 800c 	str.w	r8, [sp, #12]
 8004456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045fc <_svfiprintf_r+0x1ec>
 800445a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800445e:	4623      	mov	r3, r4
 8004460:	469a      	mov	sl, r3
 8004462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004466:	b10a      	cbz	r2, 800446c <_svfiprintf_r+0x5c>
 8004468:	2a25      	cmp	r2, #37	; 0x25
 800446a:	d1f9      	bne.n	8004460 <_svfiprintf_r+0x50>
 800446c:	ebba 0b04 	subs.w	fp, sl, r4
 8004470:	d00b      	beq.n	800448a <_svfiprintf_r+0x7a>
 8004472:	465b      	mov	r3, fp
 8004474:	4622      	mov	r2, r4
 8004476:	4629      	mov	r1, r5
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff ff6d 	bl	8004358 <__ssputs_r>
 800447e:	3001      	adds	r0, #1
 8004480:	f000 80aa 	beq.w	80045d8 <_svfiprintf_r+0x1c8>
 8004484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004486:	445a      	add	r2, fp
 8004488:	9209      	str	r2, [sp, #36]	; 0x24
 800448a:	f89a 3000 	ldrb.w	r3, [sl]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80a2 	beq.w	80045d8 <_svfiprintf_r+0x1c8>
 8004494:	2300      	movs	r3, #0
 8004496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800449a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800449e:	f10a 0a01 	add.w	sl, sl, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	9307      	str	r3, [sp, #28]
 80044a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044aa:	931a      	str	r3, [sp, #104]	; 0x68
 80044ac:	4654      	mov	r4, sl
 80044ae:	2205      	movs	r2, #5
 80044b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b4:	4851      	ldr	r0, [pc, #324]	; (80045fc <_svfiprintf_r+0x1ec>)
 80044b6:	f000 fa41 	bl	800493c <memchr>
 80044ba:	9a04      	ldr	r2, [sp, #16]
 80044bc:	b9d8      	cbnz	r0, 80044f6 <_svfiprintf_r+0xe6>
 80044be:	06d0      	lsls	r0, r2, #27
 80044c0:	bf44      	itt	mi
 80044c2:	2320      	movmi	r3, #32
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c8:	0711      	lsls	r1, r2, #28
 80044ca:	bf44      	itt	mi
 80044cc:	232b      	movmi	r3, #43	; 0x2b
 80044ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d2:	f89a 3000 	ldrb.w	r3, [sl]
 80044d6:	2b2a      	cmp	r3, #42	; 0x2a
 80044d8:	d015      	beq.n	8004506 <_svfiprintf_r+0xf6>
 80044da:	4654      	mov	r4, sl
 80044dc:	2000      	movs	r0, #0
 80044de:	f04f 0c0a 	mov.w	ip, #10
 80044e2:	9a07      	ldr	r2, [sp, #28]
 80044e4:	4621      	mov	r1, r4
 80044e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ea:	3b30      	subs	r3, #48	; 0x30
 80044ec:	2b09      	cmp	r3, #9
 80044ee:	d94e      	bls.n	800458e <_svfiprintf_r+0x17e>
 80044f0:	b1b0      	cbz	r0, 8004520 <_svfiprintf_r+0x110>
 80044f2:	9207      	str	r2, [sp, #28]
 80044f4:	e014      	b.n	8004520 <_svfiprintf_r+0x110>
 80044f6:	eba0 0308 	sub.w	r3, r0, r8
 80044fa:	fa09 f303 	lsl.w	r3, r9, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	46a2      	mov	sl, r4
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	e7d2      	b.n	80044ac <_svfiprintf_r+0x9c>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	9103      	str	r1, [sp, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfbb      	ittet	lt
 8004512:	425b      	neglt	r3, r3
 8004514:	f042 0202 	orrlt.w	r2, r2, #2
 8004518:	9307      	strge	r3, [sp, #28]
 800451a:	9307      	strlt	r3, [sp, #28]
 800451c:	bfb8      	it	lt
 800451e:	9204      	strlt	r2, [sp, #16]
 8004520:	7823      	ldrb	r3, [r4, #0]
 8004522:	2b2e      	cmp	r3, #46	; 0x2e
 8004524:	d10c      	bne.n	8004540 <_svfiprintf_r+0x130>
 8004526:	7863      	ldrb	r3, [r4, #1]
 8004528:	2b2a      	cmp	r3, #42	; 0x2a
 800452a:	d135      	bne.n	8004598 <_svfiprintf_r+0x188>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	3402      	adds	r4, #2
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9203      	str	r2, [sp, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfb8      	it	lt
 800453a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800453e:	9305      	str	r3, [sp, #20]
 8004540:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004600 <_svfiprintf_r+0x1f0>
 8004544:	2203      	movs	r2, #3
 8004546:	4650      	mov	r0, sl
 8004548:	7821      	ldrb	r1, [r4, #0]
 800454a:	f000 f9f7 	bl	800493c <memchr>
 800454e:	b140      	cbz	r0, 8004562 <_svfiprintf_r+0x152>
 8004550:	2340      	movs	r3, #64	; 0x40
 8004552:	eba0 000a 	sub.w	r0, r0, sl
 8004556:	fa03 f000 	lsl.w	r0, r3, r0
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	3401      	adds	r4, #1
 800455e:	4303      	orrs	r3, r0
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004566:	2206      	movs	r2, #6
 8004568:	4826      	ldr	r0, [pc, #152]	; (8004604 <_svfiprintf_r+0x1f4>)
 800456a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800456e:	f000 f9e5 	bl	800493c <memchr>
 8004572:	2800      	cmp	r0, #0
 8004574:	d038      	beq.n	80045e8 <_svfiprintf_r+0x1d8>
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <_svfiprintf_r+0x1f8>)
 8004578:	bb1b      	cbnz	r3, 80045c2 <_svfiprintf_r+0x1b2>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	3307      	adds	r3, #7
 800457e:	f023 0307 	bic.w	r3, r3, #7
 8004582:	3308      	adds	r3, #8
 8004584:	9303      	str	r3, [sp, #12]
 8004586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004588:	4433      	add	r3, r6
 800458a:	9309      	str	r3, [sp, #36]	; 0x24
 800458c:	e767      	b.n	800445e <_svfiprintf_r+0x4e>
 800458e:	460c      	mov	r4, r1
 8004590:	2001      	movs	r0, #1
 8004592:	fb0c 3202 	mla	r2, ip, r2, r3
 8004596:	e7a5      	b.n	80044e4 <_svfiprintf_r+0xd4>
 8004598:	2300      	movs	r3, #0
 800459a:	f04f 0c0a 	mov.w	ip, #10
 800459e:	4619      	mov	r1, r3
 80045a0:	3401      	adds	r4, #1
 80045a2:	9305      	str	r3, [sp, #20]
 80045a4:	4620      	mov	r0, r4
 80045a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045aa:	3a30      	subs	r2, #48	; 0x30
 80045ac:	2a09      	cmp	r2, #9
 80045ae:	d903      	bls.n	80045b8 <_svfiprintf_r+0x1a8>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0c5      	beq.n	8004540 <_svfiprintf_r+0x130>
 80045b4:	9105      	str	r1, [sp, #20]
 80045b6:	e7c3      	b.n	8004540 <_svfiprintf_r+0x130>
 80045b8:	4604      	mov	r4, r0
 80045ba:	2301      	movs	r3, #1
 80045bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c0:	e7f0      	b.n	80045a4 <_svfiprintf_r+0x194>
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <_svfiprintf_r+0x1fc>)
 80045cc:	a904      	add	r1, sp, #16
 80045ce:	f3af 8000 	nop.w
 80045d2:	1c42      	adds	r2, r0, #1
 80045d4:	4606      	mov	r6, r0
 80045d6:	d1d6      	bne.n	8004586 <_svfiprintf_r+0x176>
 80045d8:	89ab      	ldrh	r3, [r5, #12]
 80045da:	065b      	lsls	r3, r3, #25
 80045dc:	f53f af2c 	bmi.w	8004438 <_svfiprintf_r+0x28>
 80045e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e2:	b01d      	add	sp, #116	; 0x74
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	ab03      	add	r3, sp, #12
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	462a      	mov	r2, r5
 80045ee:	4638      	mov	r0, r7
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <_svfiprintf_r+0x1fc>)
 80045f2:	a904      	add	r1, sp, #16
 80045f4:	f000 f87c 	bl	80046f0 <_printf_i>
 80045f8:	e7eb      	b.n	80045d2 <_svfiprintf_r+0x1c2>
 80045fa:	bf00      	nop
 80045fc:	080052aa 	.word	0x080052aa
 8004600:	080052b0 	.word	0x080052b0
 8004604:	080052b4 	.word	0x080052b4
 8004608:	00000000 	.word	0x00000000
 800460c:	08004359 	.word	0x08004359

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4616      	mov	r6, r2
 8004616:	4699      	mov	r9, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	4607      	mov	r7, r0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfb8      	it	lt
 8004622:	4613      	movlt	r3, r2
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462a:	460c      	mov	r4, r1
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	b10a      	cbz	r2, 8004636 <_printf_common+0x26>
 8004632:	3301      	adds	r3, #1
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0699      	lsls	r1, r3, #26
 800463a:	bf42      	ittt	mi
 800463c:	6833      	ldrmi	r3, [r6, #0]
 800463e:	3302      	addmi	r3, #2
 8004640:	6033      	strmi	r3, [r6, #0]
 8004642:	6825      	ldr	r5, [r4, #0]
 8004644:	f015 0506 	ands.w	r5, r5, #6
 8004648:	d106      	bne.n	8004658 <_printf_common+0x48>
 800464a:	f104 0a19 	add.w	sl, r4, #25
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	6832      	ldr	r2, [r6, #0]
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	42ab      	cmp	r3, r5
 8004656:	dc28      	bgt.n	80046aa <_printf_common+0x9a>
 8004658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800465c:	1e13      	subs	r3, r2, #0
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	bf18      	it	ne
 8004662:	2301      	movne	r3, #1
 8004664:	0692      	lsls	r2, r2, #26
 8004666:	d42d      	bmi.n	80046c4 <_printf_common+0xb4>
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d020      	beq.n	80046b8 <_printf_common+0xa8>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	68e5      	ldr	r5, [r4, #12]
 800467a:	f003 0306 	and.w	r3, r3, #6
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf18      	it	ne
 8004682:	2500      	movne	r5, #0
 8004684:	6832      	ldr	r2, [r6, #0]
 8004686:	f04f 0600 	mov.w	r6, #0
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	bf08      	it	eq
 800468e:	1aad      	subeq	r5, r5, r2
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	bf08      	it	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	4293      	cmp	r3, r2
 800469a:	bfc4      	itt	gt
 800469c:	1a9b      	subgt	r3, r3, r2
 800469e:	18ed      	addgt	r5, r5, r3
 80046a0:	341a      	adds	r4, #26
 80046a2:	42b5      	cmp	r5, r6
 80046a4:	d11a      	bne.n	80046dc <_printf_common+0xcc>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e008      	b.n	80046bc <_printf_common+0xac>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4649      	mov	r1, r9
 80046b0:	4638      	mov	r0, r7
 80046b2:	47c0      	blx	r8
 80046b4:	3001      	adds	r0, #1
 80046b6:	d103      	bne.n	80046c0 <_printf_common+0xb0>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7c4      	b.n	800464e <_printf_common+0x3e>
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	18e1      	adds	r1, r4, r3
 80046c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d2:	4422      	add	r2, r4
 80046d4:	3302      	adds	r3, #2
 80046d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046da:	e7c5      	b.n	8004668 <_printf_common+0x58>
 80046dc:	2301      	movs	r3, #1
 80046de:	4622      	mov	r2, r4
 80046e0:	4649      	mov	r1, r9
 80046e2:	4638      	mov	r0, r7
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d0e6      	beq.n	80046b8 <_printf_common+0xa8>
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7d9      	b.n	80046a2 <_printf_common+0x92>
	...

080046f0 <_printf_i>:
 80046f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	7e0f      	ldrb	r7, [r1, #24]
 80046f6:	4691      	mov	r9, r2
 80046f8:	2f78      	cmp	r7, #120	; 0x78
 80046fa:	4680      	mov	r8, r0
 80046fc:	460c      	mov	r4, r1
 80046fe:	469a      	mov	sl, r3
 8004700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004706:	d807      	bhi.n	8004718 <_printf_i+0x28>
 8004708:	2f62      	cmp	r7, #98	; 0x62
 800470a:	d80a      	bhi.n	8004722 <_printf_i+0x32>
 800470c:	2f00      	cmp	r7, #0
 800470e:	f000 80d9 	beq.w	80048c4 <_printf_i+0x1d4>
 8004712:	2f58      	cmp	r7, #88	; 0x58
 8004714:	f000 80a4 	beq.w	8004860 <_printf_i+0x170>
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004720:	e03a      	b.n	8004798 <_printf_i+0xa8>
 8004722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004726:	2b15      	cmp	r3, #21
 8004728:	d8f6      	bhi.n	8004718 <_printf_i+0x28>
 800472a:	a101      	add	r1, pc, #4	; (adr r1, 8004730 <_printf_i+0x40>)
 800472c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004730:	08004789 	.word	0x08004789
 8004734:	0800479d 	.word	0x0800479d
 8004738:	08004719 	.word	0x08004719
 800473c:	08004719 	.word	0x08004719
 8004740:	08004719 	.word	0x08004719
 8004744:	08004719 	.word	0x08004719
 8004748:	0800479d 	.word	0x0800479d
 800474c:	08004719 	.word	0x08004719
 8004750:	08004719 	.word	0x08004719
 8004754:	08004719 	.word	0x08004719
 8004758:	08004719 	.word	0x08004719
 800475c:	080048ab 	.word	0x080048ab
 8004760:	080047cd 	.word	0x080047cd
 8004764:	0800488d 	.word	0x0800488d
 8004768:	08004719 	.word	0x08004719
 800476c:	08004719 	.word	0x08004719
 8004770:	080048cd 	.word	0x080048cd
 8004774:	08004719 	.word	0x08004719
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004719 	.word	0x08004719
 8004780:	08004719 	.word	0x08004719
 8004784:	08004895 	.word	0x08004895
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004798:	2301      	movs	r3, #1
 800479a:	e0a4      	b.n	80048e6 <_printf_i+0x1f6>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	6829      	ldr	r1, [r5, #0]
 80047a0:	0606      	lsls	r6, r0, #24
 80047a2:	f101 0304 	add.w	r3, r1, #4
 80047a6:	d50a      	bpl.n	80047be <_printf_i+0xce>
 80047a8:	680e      	ldr	r6, [r1, #0]
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	da03      	bge.n	80047b8 <_printf_i+0xc8>
 80047b0:	232d      	movs	r3, #45	; 0x2d
 80047b2:	4276      	negs	r6, r6
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b8:	230a      	movs	r3, #10
 80047ba:	485e      	ldr	r0, [pc, #376]	; (8004934 <_printf_i+0x244>)
 80047bc:	e019      	b.n	80047f2 <_printf_i+0x102>
 80047be:	680e      	ldr	r6, [r1, #0]
 80047c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	bf18      	it	ne
 80047c8:	b236      	sxthne	r6, r6
 80047ca:	e7ef      	b.n	80047ac <_printf_i+0xbc>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	6029      	str	r1, [r5, #0]
 80047d4:	0601      	lsls	r1, r0, #24
 80047d6:	d501      	bpl.n	80047dc <_printf_i+0xec>
 80047d8:	681e      	ldr	r6, [r3, #0]
 80047da:	e002      	b.n	80047e2 <_printf_i+0xf2>
 80047dc:	0646      	lsls	r6, r0, #25
 80047de:	d5fb      	bpl.n	80047d8 <_printf_i+0xe8>
 80047e0:	881e      	ldrh	r6, [r3, #0]
 80047e2:	2f6f      	cmp	r7, #111	; 0x6f
 80047e4:	bf0c      	ite	eq
 80047e6:	2308      	moveq	r3, #8
 80047e8:	230a      	movne	r3, #10
 80047ea:	4852      	ldr	r0, [pc, #328]	; (8004934 <_printf_i+0x244>)
 80047ec:	2100      	movs	r1, #0
 80047ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047f2:	6865      	ldr	r5, [r4, #4]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	bfa8      	it	ge
 80047f8:	6821      	ldrge	r1, [r4, #0]
 80047fa:	60a5      	str	r5, [r4, #8]
 80047fc:	bfa4      	itt	ge
 80047fe:	f021 0104 	bicge.w	r1, r1, #4
 8004802:	6021      	strge	r1, [r4, #0]
 8004804:	b90e      	cbnz	r6, 800480a <_printf_i+0x11a>
 8004806:	2d00      	cmp	r5, #0
 8004808:	d04d      	beq.n	80048a6 <_printf_i+0x1b6>
 800480a:	4615      	mov	r5, r2
 800480c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004810:	fb03 6711 	mls	r7, r3, r1, r6
 8004814:	5dc7      	ldrb	r7, [r0, r7]
 8004816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800481a:	4637      	mov	r7, r6
 800481c:	42bb      	cmp	r3, r7
 800481e:	460e      	mov	r6, r1
 8004820:	d9f4      	bls.n	800480c <_printf_i+0x11c>
 8004822:	2b08      	cmp	r3, #8
 8004824:	d10b      	bne.n	800483e <_printf_i+0x14e>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	07de      	lsls	r6, r3, #31
 800482a:	d508      	bpl.n	800483e <_printf_i+0x14e>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	6861      	ldr	r1, [r4, #4]
 8004830:	4299      	cmp	r1, r3
 8004832:	bfde      	ittt	le
 8004834:	2330      	movle	r3, #48	; 0x30
 8004836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800483a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800483e:	1b52      	subs	r2, r2, r5
 8004840:	6122      	str	r2, [r4, #16]
 8004842:	464b      	mov	r3, r9
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f8cd a000 	str.w	sl, [sp]
 800484c:	aa03      	add	r2, sp, #12
 800484e:	f7ff fedf 	bl	8004610 <_printf_common>
 8004852:	3001      	adds	r0, #1
 8004854:	d14c      	bne.n	80048f0 <_printf_i+0x200>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485a:	b004      	add	sp, #16
 800485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004860:	4834      	ldr	r0, [pc, #208]	; (8004934 <_printf_i+0x244>)
 8004862:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004866:	6829      	ldr	r1, [r5, #0]
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	f851 6b04 	ldr.w	r6, [r1], #4
 800486e:	6029      	str	r1, [r5, #0]
 8004870:	061d      	lsls	r5, r3, #24
 8004872:	d514      	bpl.n	800489e <_printf_i+0x1ae>
 8004874:	07df      	lsls	r7, r3, #31
 8004876:	bf44      	itt	mi
 8004878:	f043 0320 	orrmi.w	r3, r3, #32
 800487c:	6023      	strmi	r3, [r4, #0]
 800487e:	b91e      	cbnz	r6, 8004888 <_printf_i+0x198>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f023 0320 	bic.w	r3, r3, #32
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	2310      	movs	r3, #16
 800488a:	e7af      	b.n	80047ec <_printf_i+0xfc>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	f043 0320 	orr.w	r3, r3, #32
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	2378      	movs	r3, #120	; 0x78
 8004896:	4828      	ldr	r0, [pc, #160]	; (8004938 <_printf_i+0x248>)
 8004898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800489c:	e7e3      	b.n	8004866 <_printf_i+0x176>
 800489e:	0659      	lsls	r1, r3, #25
 80048a0:	bf48      	it	mi
 80048a2:	b2b6      	uxthmi	r6, r6
 80048a4:	e7e6      	b.n	8004874 <_printf_i+0x184>
 80048a6:	4615      	mov	r5, r2
 80048a8:	e7bb      	b.n	8004822 <_printf_i+0x132>
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	6826      	ldr	r6, [r4, #0]
 80048ae:	1d18      	adds	r0, r3, #4
 80048b0:	6961      	ldr	r1, [r4, #20]
 80048b2:	6028      	str	r0, [r5, #0]
 80048b4:	0635      	lsls	r5, r6, #24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	d501      	bpl.n	80048be <_printf_i+0x1ce>
 80048ba:	6019      	str	r1, [r3, #0]
 80048bc:	e002      	b.n	80048c4 <_printf_i+0x1d4>
 80048be:	0670      	lsls	r0, r6, #25
 80048c0:	d5fb      	bpl.n	80048ba <_printf_i+0x1ca>
 80048c2:	8019      	strh	r1, [r3, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	4615      	mov	r5, r2
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	e7ba      	b.n	8004842 <_printf_i+0x152>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	2100      	movs	r1, #0
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	602a      	str	r2, [r5, #0]
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 f82f 	bl	800493c <memchr>
 80048de:	b108      	cbz	r0, 80048e4 <_printf_i+0x1f4>
 80048e0:	1b40      	subs	r0, r0, r5
 80048e2:	6060      	str	r0, [r4, #4]
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	2300      	movs	r3, #0
 80048ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ee:	e7a8      	b.n	8004842 <_printf_i+0x152>
 80048f0:	462a      	mov	r2, r5
 80048f2:	4649      	mov	r1, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	47d0      	blx	sl
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0ab      	beq.n	8004856 <_printf_i+0x166>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	079b      	lsls	r3, r3, #30
 8004902:	d413      	bmi.n	800492c <_printf_i+0x23c>
 8004904:	68e0      	ldr	r0, [r4, #12]
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	4298      	cmp	r0, r3
 800490a:	bfb8      	it	lt
 800490c:	4618      	movlt	r0, r3
 800490e:	e7a4      	b.n	800485a <_printf_i+0x16a>
 8004910:	2301      	movs	r3, #1
 8004912:	4632      	mov	r2, r6
 8004914:	4649      	mov	r1, r9
 8004916:	4640      	mov	r0, r8
 8004918:	47d0      	blx	sl
 800491a:	3001      	adds	r0, #1
 800491c:	d09b      	beq.n	8004856 <_printf_i+0x166>
 800491e:	3501      	adds	r5, #1
 8004920:	68e3      	ldr	r3, [r4, #12]
 8004922:	9903      	ldr	r1, [sp, #12]
 8004924:	1a5b      	subs	r3, r3, r1
 8004926:	42ab      	cmp	r3, r5
 8004928:	dcf2      	bgt.n	8004910 <_printf_i+0x220>
 800492a:	e7eb      	b.n	8004904 <_printf_i+0x214>
 800492c:	2500      	movs	r5, #0
 800492e:	f104 0619 	add.w	r6, r4, #25
 8004932:	e7f5      	b.n	8004920 <_printf_i+0x230>
 8004934:	080052bb 	.word	0x080052bb
 8004938:	080052cc 	.word	0x080052cc

0800493c <memchr>:
 800493c:	4603      	mov	r3, r0
 800493e:	b510      	push	{r4, lr}
 8004940:	b2c9      	uxtb	r1, r1
 8004942:	4402      	add	r2, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	4618      	mov	r0, r3
 8004948:	d101      	bne.n	800494e <memchr+0x12>
 800494a:	2000      	movs	r0, #0
 800494c:	e003      	b.n	8004956 <memchr+0x1a>
 800494e:	7804      	ldrb	r4, [r0, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	428c      	cmp	r4, r1
 8004954:	d1f6      	bne.n	8004944 <memchr+0x8>
 8004956:	bd10      	pop	{r4, pc}

08004958 <memcpy>:
 8004958:	440a      	add	r2, r1
 800495a:	4291      	cmp	r1, r2
 800495c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004960:	d100      	bne.n	8004964 <memcpy+0xc>
 8004962:	4770      	bx	lr
 8004964:	b510      	push	{r4, lr}
 8004966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496a:	4291      	cmp	r1, r2
 800496c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004970:	d1f9      	bne.n	8004966 <memcpy+0xe>
 8004972:	bd10      	pop	{r4, pc}

08004974 <memmove>:
 8004974:	4288      	cmp	r0, r1
 8004976:	b510      	push	{r4, lr}
 8004978:	eb01 0402 	add.w	r4, r1, r2
 800497c:	d902      	bls.n	8004984 <memmove+0x10>
 800497e:	4284      	cmp	r4, r0
 8004980:	4623      	mov	r3, r4
 8004982:	d807      	bhi.n	8004994 <memmove+0x20>
 8004984:	1e43      	subs	r3, r0, #1
 8004986:	42a1      	cmp	r1, r4
 8004988:	d008      	beq.n	800499c <memmove+0x28>
 800498a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800498e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004992:	e7f8      	b.n	8004986 <memmove+0x12>
 8004994:	4601      	mov	r1, r0
 8004996:	4402      	add	r2, r0
 8004998:	428a      	cmp	r2, r1
 800499a:	d100      	bne.n	800499e <memmove+0x2a>
 800499c:	bd10      	pop	{r4, pc}
 800499e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049a6:	e7f7      	b.n	8004998 <memmove+0x24>

080049a8 <_free_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4605      	mov	r5, r0
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d040      	beq.n	8004a32 <_free_r+0x8a>
 80049b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b4:	1f0c      	subs	r4, r1, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfb8      	it	lt
 80049ba:	18e4      	addlt	r4, r4, r3
 80049bc:	f000 f910 	bl	8004be0 <__malloc_lock>
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <_free_r+0x8c>)
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	b933      	cbnz	r3, 80049d4 <_free_r+0x2c>
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	6014      	str	r4, [r2, #0]
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d0:	f000 b90c 	b.w	8004bec <__malloc_unlock>
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d908      	bls.n	80049ea <_free_r+0x42>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf01      	itttt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	1809      	addeq	r1, r1, r0
 80049e6:	6021      	streq	r1, [r4, #0]
 80049e8:	e7ed      	b.n	80049c6 <_free_r+0x1e>
 80049ea:	461a      	mov	r2, r3
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b10b      	cbz	r3, 80049f4 <_free_r+0x4c>
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d9fa      	bls.n	80049ea <_free_r+0x42>
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	1850      	adds	r0, r2, r1
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d10b      	bne.n	8004a14 <_free_r+0x6c>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	4401      	add	r1, r0
 8004a00:	1850      	adds	r0, r2, r1
 8004a02:	4283      	cmp	r3, r0
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	d1e0      	bne.n	80049ca <_free_r+0x22>
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4401      	add	r1, r0
 8004a0e:	6011      	str	r1, [r2, #0]
 8004a10:	6053      	str	r3, [r2, #4]
 8004a12:	e7da      	b.n	80049ca <_free_r+0x22>
 8004a14:	d902      	bls.n	8004a1c <_free_r+0x74>
 8004a16:	230c      	movs	r3, #12
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	e7d6      	b.n	80049ca <_free_r+0x22>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	1821      	adds	r1, r4, r0
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf01      	itttt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	1809      	addeq	r1, r1, r0
 8004a2a:	6021      	streq	r1, [r4, #0]
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	6054      	str	r4, [r2, #4]
 8004a30:	e7cb      	b.n	80049ca <_free_r+0x22>
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	2000021c 	.word	0x2000021c

08004a38 <sbrk_aligned>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	4e0e      	ldr	r6, [pc, #56]	; (8004a74 <sbrk_aligned+0x3c>)
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	6831      	ldr	r1, [r6, #0]
 8004a40:	4605      	mov	r5, r0
 8004a42:	b911      	cbnz	r1, 8004a4a <sbrk_aligned+0x12>
 8004a44:	f000 f8bc 	bl	8004bc0 <_sbrk_r>
 8004a48:	6030      	str	r0, [r6, #0]
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f8b7 	bl	8004bc0 <_sbrk_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	d00a      	beq.n	8004a6c <sbrk_aligned+0x34>
 8004a56:	1cc4      	adds	r4, r0, #3
 8004a58:	f024 0403 	bic.w	r4, r4, #3
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d007      	beq.n	8004a70 <sbrk_aligned+0x38>
 8004a60:	1a21      	subs	r1, r4, r0
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f8ac 	bl	8004bc0 <_sbrk_r>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d101      	bne.n	8004a70 <sbrk_aligned+0x38>
 8004a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a70:	4620      	mov	r0, r4
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
 8004a74:	20000220 	.word	0x20000220

08004a78 <_malloc_r>:
 8004a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	1ccd      	adds	r5, r1, #3
 8004a7e:	f025 0503 	bic.w	r5, r5, #3
 8004a82:	3508      	adds	r5, #8
 8004a84:	2d0c      	cmp	r5, #12
 8004a86:	bf38      	it	cc
 8004a88:	250c      	movcc	r5, #12
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	db01      	blt.n	8004a94 <_malloc_r+0x1c>
 8004a90:	42a9      	cmp	r1, r5
 8004a92:	d905      	bls.n	8004aa0 <_malloc_r+0x28>
 8004a94:	230c      	movs	r3, #12
 8004a96:	2600      	movs	r6, #0
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa0:	4e2e      	ldr	r6, [pc, #184]	; (8004b5c <_malloc_r+0xe4>)
 8004aa2:	f000 f89d 	bl	8004be0 <__malloc_lock>
 8004aa6:	6833      	ldr	r3, [r6, #0]
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	bb34      	cbnz	r4, 8004afa <_malloc_r+0x82>
 8004aac:	4629      	mov	r1, r5
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7ff ffc2 	bl	8004a38 <sbrk_aligned>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	d14d      	bne.n	8004b56 <_malloc_r+0xde>
 8004aba:	6834      	ldr	r4, [r6, #0]
 8004abc:	4626      	mov	r6, r4
 8004abe:	2e00      	cmp	r6, #0
 8004ac0:	d140      	bne.n	8004b44 <_malloc_r+0xcc>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	eb04 0803 	add.w	r8, r4, r3
 8004acc:	f000 f878 	bl	8004bc0 <_sbrk_r>
 8004ad0:	4580      	cmp	r8, r0
 8004ad2:	d13a      	bne.n	8004b4a <_malloc_r+0xd2>
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	3503      	adds	r5, #3
 8004ad8:	1a6d      	subs	r5, r5, r1
 8004ada:	f025 0503 	bic.w	r5, r5, #3
 8004ade:	3508      	adds	r5, #8
 8004ae0:	2d0c      	cmp	r5, #12
 8004ae2:	bf38      	it	cc
 8004ae4:	250c      	movcc	r5, #12
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7ff ffa5 	bl	8004a38 <sbrk_aligned>
 8004aee:	3001      	adds	r0, #1
 8004af0:	d02b      	beq.n	8004b4a <_malloc_r+0xd2>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	442b      	add	r3, r5
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	e00e      	b.n	8004b18 <_malloc_r+0xa0>
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	1b52      	subs	r2, r2, r5
 8004afe:	d41e      	bmi.n	8004b3e <_malloc_r+0xc6>
 8004b00:	2a0b      	cmp	r2, #11
 8004b02:	d916      	bls.n	8004b32 <_malloc_r+0xba>
 8004b04:	1961      	adds	r1, r4, r5
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	6025      	str	r5, [r4, #0]
 8004b0a:	bf18      	it	ne
 8004b0c:	6059      	strne	r1, [r3, #4]
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	bf08      	it	eq
 8004b12:	6031      	streq	r1, [r6, #0]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f104 060b 	add.w	r6, r4, #11
 8004b1e:	f000 f865 	bl	8004bec <__malloc_unlock>
 8004b22:	f026 0607 	bic.w	r6, r6, #7
 8004b26:	1d23      	adds	r3, r4, #4
 8004b28:	1af2      	subs	r2, r6, r3
 8004b2a:	d0b6      	beq.n	8004a9a <_malloc_r+0x22>
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	50a3      	str	r3, [r4, r2]
 8004b30:	e7b3      	b.n	8004a9a <_malloc_r+0x22>
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	bf0c      	ite	eq
 8004b38:	6032      	streq	r2, [r6, #0]
 8004b3a:	605a      	strne	r2, [r3, #4]
 8004b3c:	e7ec      	b.n	8004b18 <_malloc_r+0xa0>
 8004b3e:	4623      	mov	r3, r4
 8004b40:	6864      	ldr	r4, [r4, #4]
 8004b42:	e7b2      	b.n	8004aaa <_malloc_r+0x32>
 8004b44:	4634      	mov	r4, r6
 8004b46:	6876      	ldr	r6, [r6, #4]
 8004b48:	e7b9      	b.n	8004abe <_malloc_r+0x46>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	f000 f84c 	bl	8004bec <__malloc_unlock>
 8004b54:	e7a1      	b.n	8004a9a <_malloc_r+0x22>
 8004b56:	6025      	str	r5, [r4, #0]
 8004b58:	e7de      	b.n	8004b18 <_malloc_r+0xa0>
 8004b5a:	bf00      	nop
 8004b5c:	2000021c 	.word	0x2000021c

08004b60 <_realloc_r>:
 8004b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b64:	4680      	mov	r8, r0
 8004b66:	4614      	mov	r4, r2
 8004b68:	460e      	mov	r6, r1
 8004b6a:	b921      	cbnz	r1, 8004b76 <_realloc_r+0x16>
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	f7ff bf81 	b.w	8004a78 <_malloc_r>
 8004b76:	b92a      	cbnz	r2, 8004b84 <_realloc_r+0x24>
 8004b78:	f7ff ff16 	bl	80049a8 <_free_r>
 8004b7c:	4625      	mov	r5, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	f000 f838 	bl	8004bf8 <_malloc_usable_size_r>
 8004b88:	4284      	cmp	r4, r0
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	d802      	bhi.n	8004b94 <_realloc_r+0x34>
 8004b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b92:	d812      	bhi.n	8004bba <_realloc_r+0x5a>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f7ff ff6e 	bl	8004a78 <_malloc_r>
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0ed      	beq.n	8004b7e <_realloc_r+0x1e>
 8004ba2:	42bc      	cmp	r4, r7
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	bf28      	it	cs
 8004baa:	463a      	movcs	r2, r7
 8004bac:	f7ff fed4 	bl	8004958 <memcpy>
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f7ff fef8 	bl	80049a8 <_free_r>
 8004bb8:	e7e1      	b.n	8004b7e <_realloc_r+0x1e>
 8004bba:	4635      	mov	r5, r6
 8004bbc:	e7df      	b.n	8004b7e <_realloc_r+0x1e>
	...

08004bc0 <_sbrk_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4d05      	ldr	r5, [pc, #20]	; (8004bdc <_sbrk_r+0x1c>)
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fc ff2e 	bl	8001a2c <_sbrk>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_sbrk_r+0x1a>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_sbrk_r+0x1a>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	20000224 	.word	0x20000224

08004be0 <__malloc_lock>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__malloc_lock+0x8>)
 8004be2:	f000 b811 	b.w	8004c08 <__retarget_lock_acquire_recursive>
 8004be6:	bf00      	nop
 8004be8:	20000228 	.word	0x20000228

08004bec <__malloc_unlock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__malloc_unlock+0x8>)
 8004bee:	f000 b80c 	b.w	8004c0a <__retarget_lock_release_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000228 	.word	0x20000228

08004bf8 <_malloc_usable_size_r>:
 8004bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfc:	1f18      	subs	r0, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bfbc      	itt	lt
 8004c02:	580b      	ldrlt	r3, [r1, r0]
 8004c04:	18c0      	addlt	r0, r0, r3
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_acquire_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_release_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
